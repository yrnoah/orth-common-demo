{"version":3,"file":"Checkbox-6b7fc70a.js","sources":["../../../paas-library/src/Checkbox/Checkbox.tsx"],"sourcesContent":["import React, { memo, forwardRef, useCallback, useMemo, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { IconChecked } from \"../icons\";\nimport { colors } from \"../styles/colors\";\nexport interface CheckboxColorSetsProps {\n  //default\n  /**\n   * @default transparent\n   * @description replace default background color\n   */\n  defaultBG?: string;\n  /**\n   * @default noColor.Grey11 #545454\n   * @description replace default border color\n   */\n  defaultBorder?: string;\n  /**\n   * @default transparent\n   * @description replace default background color when hover\n   */\n  defaultBGHover?: string;\n  /**\n   * @default brandColor.Primary8 #3B6A80\n   * @description replace default border color when hover\n   */\n  defaultBorderHover?: string;\n\n  // active\n  /**\n   * @description replace checked icon color\n   * @default #fff\n   */\n  activeIcon?: string;\n  /**\n   * @default brandColor.Primary5 #5FA2C0\n   * @description replace background color when active\n   */\n  activeBG?: string;\n  /**\n   * @default brandColor.Primary5 #5FA2C0\n   * @description replace border color when active\n   */\n  activeBorder?: string;\n  /**\n   * @default brandColor.Primary8 #3B6A80\n   * @description replace background color when active & hover\n   */\n  activeBGHover?: string;\n  /**\n   * @default brandColor.Primary8 #3B6A80\n   * @description replace border color when active & hover\n   */\n  activeBorderHover?: string;\n\n  // disabled\n  /**\n   * @default noColor.Grey2 #F2F2F2\n   * @description replace background color when disabled\n   */\n  disabledBG?: string;\n  /**\n   * @default noColor.Grey6 #ABABAB\n   * @description replace border color when disabled\n   */\n  disabledBorder?: string;\n\n  // focused\n  /**\n   * @default transparent\n   * @description replace focused outline color\n   */\n  focusedOutline?: string;\n}\n\nexport const defaultCheckboxColorSets: CheckboxColorSetsProps = {\n  defaultBG: \"transparent\",\n  defaultBorder: colors.noColor.Grey11,\n  defaultBGHover: \"transparent\",\n  defaultBorderHover: colors.brandColor.Primary8,\n  activeBG: colors.brandColor.Primary5,\n  activeBorder: colors.brandColor.Primary5,\n  activeBGHover: colors.brandColor.Primary8,\n  activeBorderHover: colors.brandColor.Primary8,\n  disabledBG: colors.noColor.Grey2,\n  disabledBorder: colors.noColor.Grey6,\n  focusedOutline: \"transparent\",\n};\n\nexport interface CheckboxProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {\n  indeterminate?: boolean;\n  /**\n   * @default 24\n   * @description width & height\n   */\n  size?: number;\n  /** @description replace default checked icon */\n  checkIcon?: React.ReactElement;\n  uncheckIcon?: React.ReactElement;\n  indeterminateIcon?: React.ReactElement;\n  innerBoxStyles?: React.CSSProperties;\n  /**\n   * @description replace default color sets\n   * @example {\n      ...defaultCheckboxColorSets,\n      activeIcon: \"#b9b5ff\",\n      defaultBG: \"#cbfffc\",\n    }\n   */\n  colorSets?: CheckboxColorSetsProps;\n}\n\nconst Checkbox = forwardRef<HTMLInputElement, CheckboxProps>(\n  (\n    {\n      checkIcon,\n      uncheckIcon,\n      indeterminate,\n      indeterminateIcon,\n      size,\n      onChange,\n      innerBoxStyles,\n      colorSets = defaultCheckboxColorSets,\n      ...rest\n    },\n    ref\n  ) => {\n    // inner status\n    const [_checked, setChecked] = useState(rest.defaultChecked);\n    const checked = typeof rest.checked === \"boolean\" ? rest.checked : _checked;\n    const style = useMemo(() => {\n      const s = rest.style ? rest.style : {};\n      if (size) return { ...s, width: size, height: size };\n      return s;\n    }, [size, rest.style]);\n    const _onChange = useCallback(\n      (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (rest.readOnly || rest.disabled || indeterminate) return;\n        if (onChange) onChange(e);\n        // rest.checked has value, use parent's callback to update status\n        if (typeof rest.checked !== \"boolean\") setChecked(e.target.checked);\n      },\n      [onChange, rest.checked, rest.disabled, rest.readOnly, indeterminate]\n    );\n    return (\n      <Container\n        style={style}\n        checked={checked}\n        disabled={rest.disabled}\n        readOnly={rest.readOnly}\n        indeterminate={indeterminate}\n        colorSets={colorSets}\n        size={size}\n      >\n        <input {...rest} type=\"checkbox\" ref={ref} onChange={_onChange} />\n        <InnerBox style={innerBoxStyles}>\n          {!indeterminate && checked && (checkIcon || <CheckedIcon />)}\n          {!indeterminate && !checked && !!uncheckIcon && uncheckIcon}\n          {indeterminate && !!indeterminateIcon && indeterminateIcon}\n        </InnerBox>\n      </Container>\n    );\n  }\n);\nexport default memo(Checkbox);\n\nconst defaultWidth = 24;\n\nexport const InnerBox = styled.div`\n  ${(p) => p.theme.flexCSS.row}\n  ${(p) => p.theme.flexCSS.center}  \n  ${(p) => p.theme.absoluteFillCSS}\n  pointer-events: none;\n  width: 100%;\n  height: 100%;\n  transition: all 0.2s ease;\n`;\n\nconst IconStyle = css`\n  width: 70%;\n  height: 70%;\n  pointer-events: none;\n`;\n\nconst CheckedIcon = styled(IconChecked)`\n  ${IconStyle}\n`;\n\nexport const Container = styled.div<CheckboxProps>`\n  position: relative;\n  flex: none;\n  ${(p) => p.theme.flexCSS.row}\n  ${(p) => p.theme.flexCSS.center}\n  width: ${defaultWidth}px;\n  height: ${defaultWidth}px;\n  color: ${(p) =>\n    p.checked ? p.colorSets?.activeIcon || \"#fff\" : \"transparent\"};\n\n  input {\n    width: 100%;\n    height: 100%;\n    opacity: 0;\n    margin: 0;\n    padding: 0;\n    cursor: pointer;\n\n    &[readonly=\"readonly\"],\n    &[readonly] {\n      cursor: auto;\n    }\n\n    &:disabled {\n      cursor: not-allowed;\n    }\n  }\n\n  ${({ disabled, checked, colorSets }) => {\n    if (disabled)\n      return css`\n        ${InnerBox} {\n          border-color: ${colorSets?.disabledBorder ||\n          defaultCheckboxColorSets.disabledBorder};\n          background-color: ${colorSets?.disabledBG ||\n          defaultCheckboxColorSets.disabledBG};\n        }\n      `;\n    if (checked)\n      return css`\n        ${InnerBox} {\n          border-color: ${colorSets?.activeBorder ||\n          defaultCheckboxColorSets.activeBorder};\n          background-color: ${colorSets?.activeBG ||\n          defaultCheckboxColorSets.activeBG};\n        }\n\n        &:hover {\n          ${InnerBox} {\n            border-color: ${colorSets?.activeBorderHover ||\n            defaultCheckboxColorSets.activeBorderHover};\n            background-color: ${colorSets?.activeBGHover ||\n            defaultCheckboxColorSets.activeBGHover};\n          }\n        }\n      `;\n    return css`\n      ${InnerBox} {\n        border-color: ${colorSets?.defaultBorder ||\n        defaultCheckboxColorSets.defaultBorder};\n        background-color: ${colorSets?.defaultBG ||\n        defaultCheckboxColorSets.defaultBG};\n      }\n\n      &:hover {\n        ${InnerBox} {\n          border-color: ${colorSets?.defaultBorderHover ||\n          defaultCheckboxColorSets.defaultBorderHover};\n          background-color: ${colorSets?.defaultBGHover ||\n          defaultCheckboxColorSets.defaultBGHover};\n        }\n      }\n    `;\n  }};\n\n  ${({ size, colorSets }) => {\n    const _w = (size || defaultWidth) / defaultWidth;\n    return css`\n      ${InnerBox} {\n        outline: ${_w}px solid transparent;\n        outline-offset: ${_w}px;\n        border-style: solid;\n        border-width: ${_w}px;\n        border-radius: ${_w * 2}px;\n      }\n\n      input:focus ~ ${InnerBox} {\n        outline-color: ${colorSets?.focusedOutline ||\n        defaultCheckboxColorSets.focusedOutline};\n      }\n    `;\n  }}\n`;\n"],"names":["defaultCheckboxColorSets","colors","Checkbox","forwardRef","checkIcon","uncheckIcon","indeterminate","indeterminateIcon","size","onChange","innerBoxStyles","colorSets","rest","ref","_checked","setChecked","useState","checked","style","useMemo","s","_onChange","useCallback","e","jsxs","Container","jsx","InnerBox","CheckedIcon","Checkbox$1","memo","defaultWidth","styled","p","IconStyle","css","IconChecked","_a","disabled","_w"],"mappings":"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"}