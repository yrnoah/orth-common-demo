{"version":3,"file":"Checkbox.stories-b87f29dc.js","sources":["../../../paas-library/src/Checkbox/Checkbox.tsx"],"sourcesContent":["import React, { memo, forwardRef, useCallback, useMemo, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { IconChecked } from \"../icons\";\n\nexport interface CheckboxProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {\n  indeterminate?: boolean;\n  /**\n   * @default 20\n   * @description width & height\n   */\n  size?: number;\n  /** @description replace default checked icon */\n  checkIcon?: React.ReactElement;\n  indeterminateIcon?: React.ReactElement;\n  innerBoxStyles?: React.CSSProperties;\n  /**\n   * @default brandColor.Primary7 #457D96\n   * @description replace background color when active\n   */\n  activeBGColor?: string;\n  /**\n   * @default baseColor.Blue1 #DCEBF3\n   * @description replace default background color\n   */\n  defaultBGColor?: string;\n  /**\n   * @default brandColor.Primary7 #457D96\n   * @description replace border color when active\n   */\n  activeBorderColor?: string;\n  /**\n   * @default baseColor.Blue1 #DCEBF3\n   * @description replace default border color\n   */\n  defaultBorderColor?: string;\n  /** @description replace checked icon color */\n  activeIconColor?: string;\n}\n\nconst Checkbox = forwardRef<HTMLInputElement, CheckboxProps>(\n  (\n    {\n      checkIcon,\n      indeterminate,\n      indeterminateIcon,\n      size,\n      onChange,\n      innerBoxStyles,\n      activeBGColor,\n      defaultBGColor,\n      activeBorderColor,\n      defaultBorderColor,\n      activeIconColor,\n      ...rest\n    },\n    ref\n  ) => {\n    // inner status\n    const [_checked, setChecked] = useState(rest.defaultChecked);\n    const checked = typeof rest.checked === \"boolean\" ? rest.checked : _checked;\n    const style = useMemo(() => {\n      const s = rest.style ? rest.style : {};\n      if (size) return { ...s, width: size, height: size };\n      return s;\n    }, [size, rest.style]);\n    const _onChange = useCallback(\n      (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (rest.readOnly || rest.disabled || indeterminate) return;\n        if (onChange) onChange(e);\n        // rest.checked has value, use parent's callback to update status\n        if (typeof rest.checked !== \"boolean\") setChecked(e.target.checked);\n      },\n      [onChange, rest.checked, rest.disabled, rest.readOnly, indeterminate]\n    );\n    return (\n      <Container\n        style={style}\n        checked={checked}\n        disabled={rest.disabled}\n        readOnly={rest.readOnly}\n        indeterminate={indeterminate}\n        activeBGColor={activeBGColor}\n        defaultBGColor={defaultBGColor}\n        activeBorderColor={activeBorderColor}\n        defaultBorderColor={defaultBorderColor}\n        activeIconColor={activeIconColor}\n      >\n        <InnerBox style={innerBoxStyles}>\n          {!indeterminate && checked && (checkIcon || <CheckedIcon />)}\n          {indeterminate && !!indeterminateIcon && indeterminateIcon}\n        </InnerBox>\n        <input {...rest} type=\"checkbox\" ref={ref} onChange={_onChange} />\n      </Container>\n    );\n  }\n);\nexport default memo(Checkbox);\n\nexport const InnerBox = styled.div`\n  ${(p) => p.theme.flexCSS.row}\n  ${(p) => p.theme.flexCSS.center}\n  ${(p) => p.theme.absoluteFillCSS}\n  pointer-events: none;\n  box-sizing: border-box;\n  border-radius: 2px;\n  border-width: 2px;\n  border-style: solid;\n  transition: all 0.2s ease;\n`;\n\nconst IconStyle = css`\n  width: 70%;\n  height: 70%;\n  pointer-events: none;\n`;\n\nconst CheckedIcon = styled(IconChecked)`\n  ${IconStyle}\n`;\n\nexport const Container = styled.div<CheckboxProps>`\n  position: relative;\n  flex: none;\n  ${(p) => p.theme.flexCSS.row}\n  ${(p) => p.theme.flexCSS.center}\n  width: 20px;\n  height: 20px;\n  color: ${(p) => (p.checked ? p.activeIconColor || \"#fff\" : \"transparent\")};\n\n  input {\n    width: 100%;\n    height: 100%;\n    opacity: 0;\n    margin: 0;\n    padding: 0;\n    cursor: pointer;\n\n    &[readonly=\"readonly\"],\n    &[readonly] {\n      cursor: auto;\n    }\n\n    &:disabled {\n      cursor: not-allowed;\n    }\n  }\n\n  ${({\n    disabled,\n    checked,\n    theme: { colors },\n    activeBGColor,\n    activeBorderColor,\n    defaultBGColor,\n    defaultBorderColor,\n  }) => {\n    if (disabled)\n      return css`\n        ${InnerBox} {\n          border-color: ${defaultBorderColor || colors.baseColor.Blue1};\n          background-color: ${defaultBGColor || colors.baseColor.Blue1};\n        }\n      `;\n    if (checked)\n      return css`\n        ${InnerBox} {\n          border-color: ${activeBorderColor || colors.brandColor.Primary7};\n          background-color: ${activeBGColor || colors.brandColor.Primary7};\n        }\n      `;\n    return css`\n      ${InnerBox} {\n        border-color: ${defaultBorderColor || colors.baseColor.Blue1};\n        background-color: ${defaultBGColor || colors.baseColor.Blue1};\n      }\n\n      &:hover {\n        ${InnerBox} {\n          border-color: ${activeBorderColor || colors.brandColor.Primary7};\n          background-color: ${activeBGColor || colors.brandColor.Primary7};\n        }\n      }\n    `;\n  }}\n`;\n"],"names":["Checkbox","forwardRef","checkIcon","indeterminate","indeterminateIcon","size","onChange","innerBoxStyles","activeBGColor","defaultBGColor","activeBorderColor","defaultBorderColor","activeIconColor","ref","_checked","setChecked","useState","rest","checked","style","useMemo","s","_onChange","useCallback","e","jsxs","Container","InnerBox","jsx","CheckedIcon","Checkbox$2","memo","styled","div","row","center","IconStyle","css","IconChecked","disabled","colors","Blue1","Primary7"],"mappings":"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"}