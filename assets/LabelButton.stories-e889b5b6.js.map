{"version":3,"file":"LabelButton.stories-e889b5b6.js","sources":["../../../paas-library/src/Buttons/LabelButton.tsx"],"sourcesContent":["import { forwardRef, useRef, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { Portal } from \"../Siblings\";\nimport { tabTooltipPortalID } from \"../Siblings/portalID\";\nimport { Tooltip, type TooltipProps } from \"./Tooltip\";\n\ninterface LabelButtonProps extends React.ComponentProps<\"button\"> {\n  /** @description focused */\n  $active?: boolean;\n  children?: React.ReactNode;\n  /**\n   * @description which portal container to render tooltip\n   */\n  portalID?: string;\n  tooltip?: TooltipProps[\"tooltip\"];\n  tooltipProps?: Omit<\n    TooltipProps,\n    \"tooltip\" | \"tooltipPosition\" | \"parent\" | \"show\" | \"style\"\n  >;\n  /**\n   * @default bottom\n   */\n  tooltipPosition?: TooltipProps[\"tooltipPosition\"];\n  tooltipStyle?: React.CSSProperties;\n}\n\n/**\n * @design https://www.figma.com/design/xySxqdUKe9sSfV8SLimvdi/%F0%9F%8C%8F-Global-DS-Kit?node-id=1127-1058&t=Vcy9wfbTrlCfAp8z-4\n */\nexport const LabelButton = forwardRef<HTMLButtonElement, LabelButtonProps>(\n  (props, ref) => {\n    const {\n      tooltip,\n      portalID = tabTooltipPortalID,\n      tooltipPosition = \"bottom\",\n      children,\n      tooltipStyle,\n      tooltipProps,\n      ...buttonProps\n    } = props;\n    const _ref = useRef<HTMLButtonElement | null>(null);\n    // refresh position when scroll\n    const [hoveredTime, setHovered] = useState(0);\n    return (\n      <Button\n        {...buttonProps}\n        onMouseOver={(event) => {\n          buttonProps.onMouseOver?.(event);\n          setHovered(Date.now());\n        }}\n        onMouseOut={(event) => {\n          buttonProps.onMouseOut?.(event);\n          setHovered(0);\n        }}\n        onWheel={(event) => {\n          buttonProps.onWheel?.(event);\n          setHovered(Date.now());\n        }}\n        ref={(element) => {\n          _ref.current = element;\n          if (!!ref) {\n            if (typeof ref === \"function\") {\n              ref(element);\n            }\n            if (\"current\" in ref) ref.current = element;\n          }\n        }}\n      >\n        {!!tooltip && (\n          <Portal id={portalID}>\n            <Tooltip\n              {...(tooltipProps || {})}\n              tooltip={tooltip}\n              tooltipPosition={tooltipPosition}\n              parent={_ref}\n              key={`${hoveredTime}`}\n              show={!!hoveredTime} // to calculate position, should render first\n              style={tooltipStyle}\n            />\n          </Portal>\n        )}\n        {children}\n      </Button>\n    );\n  }\n);\n\nexport const labelButtonStyles = css<{ $active?: LabelButtonProps[\"$active\"] }>`\n  ${(p) => p.theme.button.reset}\n  ${(p) => p.theme.flex.row}\n  ${(p) => p.theme.flex.center}\n  ${(p) => p.theme.fonts.Default}\n  position: relative;\n  gap: 4px;\n  color: ${(p) => p.theme.colors.elementsContentMain};\n  padding: 4px 0;\n  transition: all ${(p) => p.theme.animation.duration};\n\n  &::after {\n    content: \"\";\n    display: block;\n    position: absolute;\n    left: 0;\n    right: 0;\n    bottom: -1px;\n    height: 1px;\n    transition: all ${(p) => p.theme.animation.duration};\n  }\n\n  &:hover {\n    color: ${(p) => p.theme.colors.elementsContentFocus};\n  }\n\n  &:active {\n    color: ${(p) => p.theme.colors.elementsContentFocus};\n  }\n\n  ${(p) =>\n    p.$active &&\n    css`\n      color: ${(p) => p.theme.colors.elementsContentMain};\n\n      &::after {\n        background-color: ${(p) => p.theme.colors.elementsContentFocus};\n      }\n    `}\n\n  &:disabled {\n    color: ${(p) => p.theme.colors.elementsContentMain};\n    opacity: 0.3;\n    cursor: not-allowed;\n  }\n`;\n\nconst Button = styled.button.attrs({\n  type: \"button\",\n})<LabelButtonProps>`\n  ${labelButtonStyles}\n`;\n"],"names":["LabelButton","forwardRef","props","ref","tooltip","portalID","tabTooltipPortalID","tooltipPosition","children","tooltipStyle","tooltipProps","buttonProps","_ref","useRef","hoveredTime","setHovered","useState","jsxs","Button","event","_a","element","jsx","Portal","createElement","Tooltip","labelButtonStyles","css","p","p2","styled"],"mappings":"+fA6BO,MAAAA,EAAAC,EAAA,WAAoB,CAAAC,EAAAC,IAAA,CAEvB,KAAA,CAAM,QAAAC,EACJ,SAAAC,EAAAC,EACW,gBAAAC,EAAA,SACO,SAAAC,EAClB,aAAAC,EACA,aAAAC,EACA,GAAAC,CACG,EAAAT,EAELU,EAAAC,SAAA,IAAA,EAEA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,CAAA,EACA,OAAAC,EACEC,EAAC,CAAA,GAAAP,EACK,YAAAQ,GAAA,QAEFC,EAAAT,EAAA,cAAA,MAAAS,EAAA,KAAAT,EAAAQ,GACAJ,EAAA,KAAA,IAAA,CAAA,CAAqB,EACvB,WAAAI,GAAA,QAEEC,EAAAT,EAAA,aAAA,MAAAS,EAAA,KAAAT,EAAAQ,GACAJ,EAAA,CAAA,CAAY,EACd,QAAAI,GAAA,QAEEC,EAAAT,EAAA,UAAA,MAAAS,EAAA,KAAAT,EAAAQ,GACAJ,EAAA,KAAA,IAAA,CAAA,CAAqB,EACvB,IAAAM,GAAA,CAEET,EAAA,QAAAS,EACAlB,IACE,OAAAA,GAAA,YACEA,EAAAkB,CAAA,EAEF,YAAAlB,IAAsBA,EAAA,QAAAkB,GACxB,EACF,SAAA,CAEC,CAAA,CAAAjB,GAAAkB,EAAAC,EAAA,CAAA,GAAAlB,EAAA,SAAAmB,EAAA,cAEGC,EAAC,CAAA,GAAAf,GAAA,CAAA,EACuB,QAAAN,EACtB,gBAAAG,EACA,OAAAK,EACQ,IAAA,GAAAE,IACA,KAAA,CAAA,CAAAA,EACA,MAAAL,CACD,CAAA,EAAA,EAEXD,CAED,CAAA,CAAA,CACH,CAGN,EAEOkB,EAAAC;AAAAA,IAA0BC,GAAAA,EAAA,MAAA,OAAA;AAAA,IACPA,GAAAA,EAAA,MAAA,KAAA;AAAA,IACFA,GAAAA,EAAA,MAAA,KAAA;AAAA,IACAA,GAAAA,EAAA,MAAA,MAAA;AAAA;AAAA;AAAA,WACCA,GAAAA,EAAA,MAAA,OAAA;AAAA;AAAA,oBAGQA,GAAAA,EAAA,MAAA,UAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEYA,GAAAA,EAAA,MAAA,UAAA;AAAA;AAAA;AAAA;AAAA,aAUEA,GAAAA,EAAA,MAAA,OAAA;AAAA;AAAA;AAAA;AAAA,aAIZA,GAAAA,EAAA,MAAA,OAAA;AAAA;AAAA;AAAA,IAIAA,GAAAA,EAAA,SAAAD;AAAAA,eAK/BE,GAAAA,EAAA,MAAA,OAAA;AAAA;AAAA;AAAA,4BACiCA,GAAAA,EAAA,MAAA,OAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAGaD,GAAAA,EAAA,MAAA,OAAA;AAAA;AAAA;AAAA;AAAA,EAWlDV,EAAAY,EAAA,OAAA,MAAA,CAAmC,KAAA,QAEnC,CAAA;AAAA,IAACJ;AAAA;;;;;;;;;;;;;;;;;"}