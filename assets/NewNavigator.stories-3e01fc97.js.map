{"version":3,"file":"NewNavigator.stories-3e01fc97.js","sources":["../../../paas-library/src/styles/shadows.ts","../../../paas-library/src/DynamicMenu/themes/typography.ts","../../../paas-library/src/FileTree/common.ts","../../../paas-library/src/FileTree/style.ts","../../../paas-library/src/FileTree/Item.tsx","../../../paas-library/src/FileTree/FileTree.tsx"],"sourcesContent":["export const shadows = {\n  floatingLight: \"0px 2px 10px rgba(122, 111, 101, 0.35)\",\n  floatingDark: \"0px 3px 20px -2px rgba(5, 18, 27, 0.35)\",\n  arrowFloating: \"0px 7px 3px rgba(140, 67, 0, 0.35)\",\n};\n","import { css } from \"styled-components\";\n\nconst dymenu = css`\n  font-family: \"Be Vietnam Pro\", \"Helvetica Neue\", sans-serif;\n  font-size: 14px;\n  line-height: 21px;\n  letter-spacing: 0;\n`;\n\nconst dymenu_MenuHeadline = css`\n  ${dymenu}\n  font-weight: 500;\n`;\n\nconst dymenu_MenuTitle = css`\n  ${dymenu}\n  font-weight: 400;\n`;\n\nconst dymenu_MenuBody = css`\n  font-family: \"Be Vietnam Pro\", \"Helvetica Neue\", sans-serif;\n  font-size: 12px;\n  line-height: 18px;\n  font-weight: 400;\n  letter-spacing: 0;\n`;\n\nconst dymenu_MenuBtnText = css`\n  ${dymenu_MenuBody}\n  font-weight: 600;\n  text-align: center;\n`;\n\nexport const typography = {\n  dymenu_MenuHeadline,\n  dymenu_MenuTitle,\n  dymenu_MenuBody,\n  dymenu_MenuBtnText,\n};\n","import { createContext, useContext } from \"react\";\nimport { SystemIdType } from \"./types\";\n\nexport enum extraEditingTypeId {\n  Empty = -2,\n  Title = -1,\n}\n\nexport enum extraSelectionTypeId {\n  Empty = -1,\n}\n\ninterface Context {\n  currentSelectedItem: SystemIdType;\n  setCurrentSelectedItem: (id: SystemIdType) => void;\n  currentEditItem: SystemIdType;\n  setCurrentEditItem: (id: SystemIdType) => void;\n  handleRename: (id: SystemIdType) => (name: string) => void;\n}\nexport const context = createContext<Context>({\n  currentSelectedItem: extraSelectionTypeId.Empty,\n  currentEditItem: extraEditingTypeId.Empty,\n  setCurrentSelectedItem: () => {},\n  setCurrentEditItem: () => {},\n  handleRename: () => () => {},\n});\nexport const useTreeEvent = () => useContext(context);\n","import styled, { css } from \"styled-components\";\nimport { typography } from \"../DynamicMenu/themes\";\n\nexport const TitleWrapper = styled.div`\n  width: 100%;\n  height: 52px;\n  box-sizing: border-box;\n  padding: 16px 16px 12px;\n  display: flex;\n  align-items: center;\n  ${typography.dymenu_MenuHeadline}\n  border-bottom: 1px solid ${({ theme }) => theme.colors.addHoveredWarm};\n  margin-bottom: 2px;\n`;\n\nexport const TitleText = styled.div`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  user-select: none;\n  margin-left: 12px;\n`;\n\nexport const ItemText = styled.div`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  user-select: none;\n  margin-left: 8px;\n`;\n\nexport const Input = styled.input`\n  margin-left: 6px;\n  outline: none;\n  ${typography.dymenu_MenuHeadline}\n  box-shadow: 0 0 0 1px ${({ theme }) => theme.colors.Clausblue_200} inset;\n  border: none;\n  padding: 4px 6px;\n  display: flex;\n  width: calc(100% - 24px);\n  align-items: center;\n  height: 26px;\n  border-radius: 5px;\n  box-sizing: border-box;\n`;\nexport const ItemInput = styled(Input)`\n  margin-left: 2px;\n`;\n\nexport const SelectWrapper = styled.div<{ selected: boolean }>`\n  ${(p) =>\n    p.selected\n      ? css`\n          background: ${p.theme.colors.noColor.Grey2};\n\n          .selected {\n            background: ${p.theme.colors.baseColor.Blue1};\n          }\n        `\n      : undefined}\n`;\n\nexport const ArrowWrapper = styled.div<{ $rotate: boolean }>`\n  position: absolute;\n  left: 10px;\n  width: 22px;\n  height: 22px;\n  flex-shrink: 0;\n  display: flex;\n  ${(p) => (p.$rotate ? \"transform: rotate(90deg);\" : \"\")}\n  transition: transform 300ms ease-out;\n  ${({ theme }) => theme.flexCSS.center}\n  cursor: pointer;\n`;\n\nexport const IconWrapper = styled.div`\n  width: 24px;\n  height: 24px;\n  border-radius: 7px;\n  display: flex;\n  flex-shrink: 0;\n  ${({ theme }) => theme.flexCSS.center}\n`;\n\nexport const ItemWrapper = styled.div<{ left: number }>`\n  height: 40px;\n  display: flex;\n  align-items: center;\n  padding: 0 16px;\n  padding-left: ${(p) => p.left}px;\n  ${typography.dymenu_MenuHeadline}\n\n  :hover {\n    box-shadow: 0 0 0 1px ${({ theme }) => theme.colors.Clausblue_200} inset;\n  }\n`;\n\nexport const ChildrenWrapper = styled.div`\n  overflow: hidden;\n`;\n","import { useRef, useState } from \"react\";\nimport { useClickAway, useEffectOnce } from \"react-use\";\nimport { useTheme } from \"styled-components\";\nimport {\n  DmIcon12Right,\n  DmIconLargeFmu,\n  DmIconLargeSsp,\n  IconConnectorInput,\n  IconConnectorOutput,\n} from \"../icons\";\nimport { extraEditingTypeId, useTreeEvent } from \"./common\";\nimport * as S from \"./style\";\nimport { ITreeItem, ItemNodeType, SystemIdType } from \"./types\";\n\ninterface Props {\n  id: SystemIdType;\n  name: string;\n  layer?: number;\n  type: ItemNodeType;\n  icon?: React.ReactNode;\n  leaves?: ITreeItem[];\n}\nconst LAYER_WIDTH = 22 as const;\nexport function Item({ id, leaves, layer = 1, ...info }: Props) {\n  const {\n    currentEditItem: edit,\n    setCurrentEditItem: setEdit,\n    currentSelectedItem: select,\n    setCurrentSelectedItem: setSelect,\n    handleRename,\n  } = useTreeEvent();\n  const [expand, setExpand] = useState(false);\n  const hasChild = !!leaves?.length;\n  return (\n    <S.SelectWrapper selected={select === id}>\n      <ItemLine\n        className={select === id ? \"selected\" : \"\"}\n        expand={expand}\n        setExpand={setExpand}\n        {...info}\n        left={layer * LAYER_WIDTH}\n        editing={edit === id}\n        hasChild={hasChild}\n        onClick={() => {\n          setSelect?.(id);\n        }}\n        onDoubleClick={() => setEdit?.(id)}\n        handleRename={handleRename?.(id)}\n      />\n      {expand &&\n        leaves?.map(({ type, item, children }) => (\n          <Item\n            key={item.id}\n            {...item}\n            type={type}\n            leaves={children}\n            layer={layer + 1}\n          />\n        ))}\n    </S.SelectWrapper>\n  );\n}\n\ninterface ItemLineProps {\n  left: number;\n  className?: string;\n  editing: boolean;\n  type: ItemNodeType;\n  icon?: React.ReactNode;\n  name: string;\n  hasChild: boolean;\n  expand: boolean;\n  setExpand: (expand: boolean) => void;\n  onClick?: () => void;\n  onDoubleClick?: () => void;\n  handleRename?: (title: string) => void;\n}\nfunction ItemLine({\n  className,\n  expand,\n  setExpand,\n  left,\n  hasChild,\n  type,\n  icon,\n  name,\n  editing,\n  onClick,\n  onDoubleClick,\n  handleRename,\n}: ItemLineProps) {\n  const ref = useRef<HTMLInputElement>(null);\n  useEffectOnce(() => {\n    if (editing) {\n      ref.current?.focus();\n      ref.current?.select();\n    }\n  });\n  useClickAway(ref, () => {\n    if (editing && ref.current) handleRename?.(ref.current.value);\n  });\n  return (\n    <S.ItemWrapper className={className} left={left + 16} onClick={onClick}>\n      {hasChild && (\n        <S.ArrowWrapper $rotate={expand} onClick={() => setExpand(!expand)}>\n          <DmIcon12Right width={10} height={10} />\n        </S.ArrowWrapper>\n      )}\n      <Icon type={type} icon={icon} />\n      {editing ? (\n        <S.ItemInput\n          ref={ref}\n          defaultValue={name}\n          onKeyUp={(e) => {\n            switch (e.key) {\n              case \"Enter\":\n                if (editing && ref.current) handleRename?.(ref.current.value);\n                return;\n              case \"Escape\":\n                if (editing) handleRename?.(name);\n                return;\n              default:\n                return;\n            }\n          }}\n        />\n      ) : (\n        <S.ItemText onDoubleClick={onDoubleClick}>{name}</S.ItemText>\n      )}\n    </S.ItemWrapper>\n  );\n}\n\nfunction Icon({ type, icon }: { type: ItemNodeType; icon?: React.ReactNode }) {\n  const { colors } = useTheme();\n  return (\n    <S.IconWrapper>\n      {!!icon && icon}\n      {!icon && type === \"group\" && (\n        <DmIconLargeSsp width={20} height={12} color={colors.Neutral_400} />\n      )}\n      {!icon && type === \"ssp\" && (\n        <DmIconLargeSsp width={20} height={12} color={colors.Neutral_400} />\n      )}\n      {!icon && type === \"fmu\" && (\n        <DmIconLargeFmu width={21} height={14} color={colors.Neutral_400} />\n      )}\n      {!icon && type === \"input\" && (\n        <IconConnectorInput width={16} height={16} color={colors.Neutral_400} />\n      )}\n      {!icon && type === \"output\" && (\n        <IconConnectorOutput\n          width={16}\n          height={16}\n          color={colors.Neutral_400}\n        />\n      )}\n    </S.IconWrapper>\n  );\n}\n\ninterface TitleProps {\n  name: string;\n  icon?: React.ReactNode;\n  handleRenameSSP: (title: string) => void;\n}\nexport const Title = ({ name, icon, handleRenameSSP }: TitleProps) => {\n  const ref = useRef<HTMLInputElement>(null);\n  const { currentEditItem: edit, setCurrentEditItem: setEdit } = useTreeEvent();\n  useEffectOnce(() => {\n    if (edit === extraEditingTypeId.Title) {\n      ref.current?.focus();\n      ref.current?.select();\n    }\n  });\n  useClickAway(ref, () => {\n    if (edit === extraEditingTypeId.Title)\n      handleRenameSSP(ref.current?.value ?? \"NamingError\");\n  });\n  return (\n    <S.TitleWrapper onDoubleClick={() => setEdit?.(extraEditingTypeId.Title)}>\n      <Icon type=\"ssp\" icon={icon} />\n      {edit === extraEditingTypeId.Title ? (\n        <S.Input\n          ref={ref}\n          defaultValue={name}\n          onKeyUp={(e) => {\n            switch (e.key) {\n              case \"Enter\":\n                if (edit === extraEditingTypeId.Title && ref.current?.value)\n                  handleRenameSSP(ref.current?.value);\n                return;\n              case \"Escape\":\n                if (edit === extraEditingTypeId.Title) handleRenameSSP(name);\n                return;\n              default:\n                return;\n            }\n          }}\n        />\n      ) : (\n        <S.TitleText>{name}</S.TitleText>\n      )}\n    </S.TitleWrapper>\n  );\n};\n","import { MouseEventHandler, useRef, useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport styled, { useTheme } from \"styled-components\";\nimport { DmIcon12Left, IconTreeToTop } from \"../icons\";\nimport { flexCSS } from \"../styles/commons\";\nimport { shadows } from \"../styles/shadows\";\nimport { Item, Title } from \"./Item\";\nimport { context, extraEditingTypeId } from \"./common\";\nimport { ITreeItem, SystemIdType } from \"./types\";\n\ninterface Props {\n  hidden?: boolean;\n  initialHide: boolean;\n  sspTitle: string;\n  editTitle?: boolean;\n  data: ITreeItem[];\n  currentSelectedItem: SystemIdType;\n  setCurrentSelectedItem: (id: SystemIdType) => void;\n  handleRenameSSP: (title: string) => void;\n  handleRenameItem: (id: SystemIdType) => (title: string) => void;\n  showBackIcon: boolean;\n  backIconLabel: string;\n  handleClickBackButton: MouseEventHandler;\n  style?: React.CSSProperties;\n}\n\nexport function FileTree({\n  hidden,\n  initialHide,\n  sspTitle,\n  data,\n  editTitle,\n  handleRenameSSP,\n  handleRenameItem,\n  currentSelectedItem,\n  setCurrentSelectedItem,\n  showBackIcon,\n  backIconLabel,\n  handleClickBackButton,\n  style,\n}: Props) {\n  const [hideMenu, setHideMenu] = useState(initialHide);\n  /**\n   * @description index of current editing element;\n   * @description EditIndex global status id means no editing;\n   */\n  const [currentEditItem, setCurrentEditItem] = useState<\n    extraEditingTypeId | SystemIdType\n  >(editTitle ? extraEditingTypeId.Title : extraEditingTypeId.Empty);\n  const ref = useRef<HTMLDivElement>(null);\n  const { colors } = useTheme();\n  const resetEdit = () => setCurrentEditItem(extraEditingTypeId.Empty);\n  return (\n    <context.Provider\n      value={{\n        currentEditItem,\n        setCurrentEditItem,\n        currentSelectedItem,\n        setCurrentSelectedItem,\n        handleRename: (id) => (name) => {\n          resetEdit();\n          handleRenameItem(id)(name);\n        },\n      }}\n    >\n      {createPortal(\n        <Button\n          revert={hideMenu}\n          onClick={() => setHideMenu(!hideMenu)}\n          hidden={hidden}\n        >\n          <DmIcon12Left width={12} height={12} color={colors.Neutral_300} />\n        </Button>,\n        document.body\n      )}\n      {!hidden &&\n        showBackIcon &&\n        createPortal(\n          <TopWrapper\n            onClick={handleClickBackButton}\n            style={{\n              top: hideMenu ? \"calc(50% - 10px)\" : style?.top,\n              left: hideMenu ? \"50px\" : \"20%\",\n            }}\n          >\n            <InnerWrapper hoverable={hideMenu}>\n              <IconLabel>{backIconLabel}</IconLabel>\n              <TopIcon />\n            </InnerWrapper>\n          </TopWrapper>,\n          document.body\n        )}\n      {!hidden && (\n        <Wrapper hide={hideMenu} style={style} ref={ref}>\n          <Title\n            name={sspTitle}\n            handleRenameSSP={(title) => {\n              handleRenameSSP(title);\n              resetEdit();\n            }}\n          />\n          <ItemContainer>\n            {data.map(({ type, item, children }, index) => (\n              <Item\n                key={item.id}\n                id={item.id}\n                type={type}\n                name={item.name}\n                leaves={children}\n              />\n            ))}\n          </ItemContainer>\n        </Wrapper>\n      )}\n    </context.Provider>\n  );\n}\n\nconst ItemContainer = styled.div`\n  overflow-y: scroll;\n  height: calc(100% - 52px);\n  border-radius: 0 0 16px 16px;\n\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nconst Button = styled.div<{ revert: boolean }>`\n  cursor: pointer;\n  position: absolute;\n  top: 50%;\n  left: 16px;\n  transform: translateY(-50%);\n  width: 24px;\n  height: 24px;\n  border-radius: 6px;\n  z-index: 10;\n  display: flex;\n  ${flexCSS.center};\n  transition: background 150ms linear;\n\n  :hover {\n    background: ${({ theme }) => theme.colors.noColor.Grey2};\n  }\n\n  svg {\n    transition: all 300ms ease-out;\n    transform: ${(p) => (p.revert ? \"rotate(-180deg)\" : \"\")};\n  }\n`;\n\nconst Wrapper = styled.div<{ hide: boolean }>`\n  position: absolute;\n  top: 50%;\n  left: ${(p) => (p.hide ? \"-25%\" : \"52px\")};\n  transition: left 450ms ease-in-out;\n  transform: translateY(-50%);\n  height: 87.5%;\n  min-width: 15%;\n  max-width: 22%;\n  box-shadow: ${shadows.floatingLight};\n  border-radius: 16px;\n  background: white;\n`;\n\nconst TopWrapper = styled.div`\n  position: absolute;\n  overflow: hidden;\n  ${(p) => p.theme.fonts[\"Body-Medium/Bold\"]}\n  color: black;\n`;\n\nconst InnerWrapper = styled.div<{ hoverable?: boolean }>`\n  position: relative;\n  right: calc(100% - 20px);\n  transition: right 150ms ease-out;\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  cursor: pointer;\n\n  ${(p) => (p.hoverable ? `:hover { right: 0px; }` : \"\")}\n`;\n\nconst TopIcon = styled(IconTreeToTop)`\n  width: 20px;\n  height: 20px;\n`;\n\nconst IconLabel = styled.span`\n  max-width: 120px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  user-select: none;\n`;\n"],"names":["shadows","floatingLight","floatingDark","arrowFloating","dymenu","css","dymenu_MenuHeadline","dymenu_MenuTitle","dymenu_MenuBody","dymenu_MenuBtnText","typography","extraEditingTypeId","Empty","Title","extraSelectionTypeId","context","createContext","currentSelectedItem","currentEditItem","setCurrentSelectedItem","setCurrentEditItem","handleRename","useTreeEvent","useContext","TitleWrapper","styled","div","theme","colors","addHoveredWarm","TitleText","ItemText","Input","input","Clausblue_200","ItemInput","SelectWrapper","p","selected","noColor","Grey2","baseColor","Blue1","undefined","ArrowWrapper","$rotate","flexCSS","center","IconWrapper","ItemWrapper","left","LAYER_WIDTH","Item","id","leaves","info","edit","setEdit","select","setSelect","expand","setExpand","useState","hasChild","jsxs","S.SelectWrapper","jsx","ItemLine","layer","type","item","children","className","icon","name","editing","onClick","onDoubleClick","ref","useRef","useEffectOnce","useClickAway","S.ItemWrapper","Icon","S.ItemInput","e","S.ItemText","S.IconWrapper","DmIconLargeSsp","DmIconLargeFmu","IconConnectorInput","IconConnectorOutput","handleRenameSSP","S.TitleWrapper","S.Input","_a","S.TitleText","FileTree","hidden","initialHide","sspTitle","data","editTitle","handleRenameItem","showBackIcon","backIconLabel","handleClickBackButton","hideMenu","setHideMenu","resetEdit","createPortal","TopWrapper","style","top","InnerWrapper","IconLabel","TopIcon","Wrapper","title","ItemContainer","Button","IconTreeToTop"],"mappings":"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"}