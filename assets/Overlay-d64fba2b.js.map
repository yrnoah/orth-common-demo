{"version":3,"file":"Overlay-d64fba2b.js","sources":["../../../paas-library/src/Dropdown/Selection/common.ts","../../../paas-library/src/Dropdown/Selection/Overlay.tsx"],"sourcesContent":["export const defaultWidth = 136;\nexport const defaultHeight = 24;\nexport const defaultRect: { width: number; height: number } = {\n  width: defaultWidth,\n  height: defaultHeight,\n};\n\nexport const bindRef = <T extends HTMLElement>(\n  element: T,\n  refCallback?: React.ForwardedRef<T>\n) => {\n  if (refCallback) {\n    if (typeof refCallback === \"function\") {\n      refCallback(element);\n      return;\n    }\n    if (refCallback && \"current\" in refCallback) refCallback.current = element;\n  }\n};\n","import { memo, useEffect, useRef } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport useCurrent from \"../../hooks/useCurrent\";\nimport { IconCheckSmall } from \"../../icons\";\nimport { type BaseOption, type OverlayProps } from \"./types\";\n\nexport const Overlay = memo(\n  <TOption extends BaseOption>(props: OverlayProps<TOption>) => {\n    const { options, disabled, onSelect, resetText, selected, visible, _ref } =\n      props;\n    const refDict = useRef<Record<string, HTMLLIElement | null>>({});\n    const currentSelected = useCurrent(selected);\n    // scroll selected into view\n    useEffect(() => {\n      if (!visible) return;\n      if (!currentSelected.current) return;\n      if (!refDict.current[currentSelected.current]) return;\n      refDict.current[currentSelected.current]?.scrollIntoView();\n    }, [currentSelected, refDict, visible]);\n    if (!options || disabled) return null;\n    return (\n      <OptionsWrapper\n        ref={_ref}\n        onScroll={(e) => {\n          e.stopPropagation();\n          e.preventDefault();\n        }}\n      >\n        {!!resetText && (\n          <Option\n            onClick={() => {\n              if (onSelect) onSelect(null);\n            }}\n          >\n            {resetText}\n          </Option>\n        )}\n        {options.map((item) => (\n          <Option\n            ref={(element) => {\n              refDict.current[item.key] = element;\n            }}\n            key={item.key}\n            $active={item.key === selected}\n            onClick={() => {\n              if (onSelect) onSelect(item);\n            }}\n          >\n            <SelectedIcon />\n            <span>{item.text ?? item.key}</span>\n          </Option>\n        ))}\n      </OptionsWrapper>\n    );\n  }\n);\n\nconst SelectedIcon = styled(IconCheckSmall)`\n  width: 16px;\n  height: 16px;\n  color: ${(p) => p.theme.colors.textInput.default};\n  position: absolute;\n  left: 12px;\n  top: 8px;\n  opacity: 0;\n  pointer-events: none;\n`;\n\nexport const Option = styled.li<{ $active?: boolean }>`\n  ${(p) => p.theme.flex.row}\n  width: 100%;\n  padding: 8px 12px 8px 36px;\n  overflow: hidden;\n  background-color: #fff;\n  position: relative;\n  user-select: none;\n  word-break: break-all;\n\n  ${({ $active }) =>\n    $active &&\n    css`\n      ${SelectedIcon} {\n        opacity: 1;\n      }\n    `}\n\n  &:hover {\n    background-color: ${(p) => p.theme.colors.button.hovered};\n  }\n`;\n\nexport const OptionsWrapper = styled.ul`\n  padding: 0;\n  margin: ${(p) => p.theme.padding.xxxxs}px 0;\n  list-style: none;\n  ${(p) => p.theme.fonts[\"Caption-Large/Bold\"]}\n  color: ${(p) => p.theme.colors.textInput.default};\n  width: 100%;\n  max-height: 70vh;\n  overflow-y: auto;\n  ${(p) => p.theme.scrollbar}\n  border-radius: ${(p) => p.theme.radius.xxxxs}px;\n  border: 1px solid ${(p) => p.theme.colors.button.hovered};\n  background-color: #fff;\n`;\n"],"names":["defaultWidth","defaultHeight","defaultRect","bindRef","element","refCallback","Overlay","memo","props","options","disabled","onSelect","resetText","selected","visible","_ref","refDict","useRef","currentSelected","useCurrent","useEffect","_a","jsxs","OptionsWrapper","e","jsx","Option","item","SelectedIcon","styled","IconCheckSmall","p","$active","css"],"mappings":"wPAAO,MAAMA,EAAe,IACfC,EAAgB,GAChBC,EAAiD,CAC5D,MAAOF,EACP,OAAQC,CACV,EAEaE,EAAU,CACrBC,EACAC,IACG,CACH,GAAIA,EAAa,CACX,GAAA,OAAOA,GAAgB,WAAY,CACrCA,EAAYD,CAAO,EACnB,OAEEC,GAAe,YAAaA,IAAaA,EAAY,QAAUD,GAEvE,ECZOE,EAAAC,EAAA,KAAgBC,GAAA,CAEnB,KAAA,CAAA,QAAAC,EAAA,SAAAC,EAAA,SAAAC,EAAA,UAAAC,EAAA,SAAAC,EAAA,QAAAC,EAAA,KAAAC,CAAA,EAAAP,EAEAQ,EAAAC,SAAA,CAAA,CAAA,EACAC,EAAAC,EAAAN,CAAA,EAQA,OANAO,EAAAA,UAAA,IAAA,OACEN,GACAI,EAAA,SACAF,EAAA,QAAAE,EAAA,OAAA,KACAG,EAAAL,EAAA,QAAAE,EAAA,OAAA,IAAA,MAAAG,EAAA,iBAAyD,EAAA,CAAAH,EAAAF,EAAAF,CAAA,CAAA,EAE3D,CAAAL,GAAAC,EAA0B,KAC1BY,EACEC,EAAC,CAAA,IAAAR,EACM,SAAAS,GAAA,CAEHA,EAAA,gBAAA,EACAA,EAAA,eAAA,CAAiB,EACnB,SAAA,CAEC,CAAA,CAAAZ,GAAAa,EACCC,EAAC,CAAA,QAAA,IAAA,CAEGf,GAAcA,EAAA,IAAA,CAAa,EAC7B,SAAAC,CAEC,CAAA,EACHH,EAAA,IAAAkB,GAAAL,EAGAI,EAAC,CAAA,IAAAtB,GAAA,CAEGY,EAAA,QAAAW,EAAA,GAAA,EAAAvB,CAA4B,EAC9B,QAAAuB,EAAA,MAAAd,EAEsB,QAAA,IAAA,CAEpBF,GAAcA,EAAAgB,CAAA,CAAa,EAC7B,SAAA,CAEAF,EAAAG,EAAA,EAAA,EAAcH,EAAA,OAAA,CAAA,SAAAE,EAAA,MAAAA,EAAA,IAAA,CACe,CAAA,EAAAA,EAAA,GAPnB,CAAA,CASb,CAAA,CAAA,CACH,CAGN,EAEAC,EAAAC,EAAAC,CAAA;AAAA;AAAA;AAAA,WAA0CC,GAAAA,EAAA,MAAA,OAAA,UAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWnCL,EAAAG,EAAA;AAAA,IAAsBE,GAAAA,EAAA,MAAA,KAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IACL,CAAA,CAAA,QAAAC,KAAAA,GAAAC;AAAAA,QAWpBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACIG,GAAAA,EAAA,MAAA,OAAA,OAAA;AAAA;AAAA,EAUDR,EAAAM,EAAA;AAAA;AAAA,YAA8BE,GAAAA,EAAA,MAAA,QAAA;AAAA;AAAA,IAEFA,GAAAA,EAAA,MAAA,MAAA,oBAAA;AAAA,WAEUA,GAAAA,EAAA,MAAA,OAAA,UAAA;AAAA;AAAA;AAAA;AAAA,IACFA,GAAAA,EAAA,MAAA;AAAA,mBAIxBA,GAAAA,EAAA,MAAA,OAAA;AAAA,sBACsBA,GAAAA,EAAA,MAAA,OAAA,OAAA;AAAA;AAAA"}