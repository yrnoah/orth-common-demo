{"version":3,"file":"SegmentedButtonGroup.stories-4f605996.js","sources":["../../../paas-library/src/Buttons/SegmentedButton/SegmentedButtonGroup.tsx"],"sourcesContent":["import { ComponentPropsWithRef, useState } from \"react\";\nimport { SegmentedButton, type SegmentedButtonProps } from \"./SegmentedButton\";\nimport styled, { css } from \"styled-components\";\nimport { fixedForwardRef } from \"../../utils/component\";\n\nexport type SegmentedButtonGroupOption = {\n  properties: Omit<ComponentPropsWithRef<typeof SegmentedButton>, \"$active\">;\n  key: string;\n};\n\n/** @design https://www.figma.com/design/JGFHYME2p7RpeMYcoMqooS/ODE-Library-1.0?node-id=11429-14810&t=yPRe6bLPZnxitmAJ-4 */\nexport interface SegmentedButtonGroupProps<\n  TOption extends SegmentedButtonGroupOption\n> extends ComponentPropsWithRef<\"div\"> {\n  /** @description option.key | option.key array */\n  active?: string;\n  onActiveChange?: (\n    activeKey: TOption[\"key\"],\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => void;\n  /** @description button array */\n  option: TOption[];\n  /**\n   * @default medium\n   */\n  $size?: SegmentedButtonProps[\"$size\"];\n  /**\n   * @default false\n   * @description override single button disable;\n   */\n  disabled?: boolean;\n  /**\n   * @description if fixedForwardRef & ref not work, try _ref\n   * @todo should fix when react19 release\n   */\n  _ref?: React.ForwardedRef<HTMLDivElement>;\n}\n\n/**\n * @note for generic type usage, if need to use ref, please import fixedForwardRef from utils/components and `const SegmentedButtonGroup = fixedForwardRef(RawSegmentedButtonGroup);`\n * @design https://www.figma.com/design/JGFHYME2p7RpeMYcoMqooS/ODE-Library-1.0?node-id=6011-9842&t=FAzx6jwix7ISvVDA-4\n * @description radio (single) active\n */\nexport const SegmentedButtonGroup = <\n  TOption extends SegmentedButtonGroupOption\n>(\n  props: SegmentedButtonGroupProps<TOption>,\n  ref: React.ForwardedRef<HTMLDivElement>\n) => {\n  const {\n    option,\n    $size = \"medium\",\n    active,\n    disabled = false,\n    onActiveChange,\n    _ref,\n    ...containerProps\n  } = props;\n  const [innerActive, setActive] = useState(() => {\n    if (typeof active === \"string\") return active;\n    return \"\";\n  });\n  const _active = typeof active === \"string\" ? active : innerActive;\n  return (\n    <Container\n      {...containerProps}\n      $size={$size}\n      disabled={disabled}\n      ref={(element) => {\n        if (_ref) {\n          if (typeof _ref === \"function\") {\n            _ref(element);\n            return;\n          }\n          if (\"current\" in _ref) _ref.current = element;\n        }\n        if (ref) {\n          if (typeof ref === \"function\") {\n            ref(element);\n            return;\n          }\n          if (\"current\" in ref) ref.current = element;\n        }\n      }}\n    >\n      {option.map((item) => {\n        const isActive = _active === item.key;\n        const overrideProperties: Partial<\n          ComponentPropsWithRef<typeof SegmentedButton>\n        > = { $size };\n        /** override disabled, control by parent */\n        if (disabled) overrideProperties.disabled = true;\n        if (disabled && !isActive) {\n          overrideProperties.style = {\n            ...(item.properties?.style || {}),\n            backgroundColor: \"transparent\",\n          };\n        }\n        return (\n          <SegmentedButton\n            {...item.properties}\n            {...overrideProperties}\n            $active={isActive}\n            onClick={(event) => {\n              if (disabled) return;\n              if (_active === item.key) return;\n              item.properties?.onClick?.(event);\n              onActiveChange?.(item.key, event);\n              setActive(item.key);\n            }}\n            key={item.key}\n          />\n        );\n      })}\n    </Container>\n  );\n};\n\nexport const SegmentedButtonGroupWithRef =\n  fixedForwardRef(SegmentedButtonGroup);\n\ntype ContainerProps = Required<\n  Pick<\n    SegmentedButtonGroupProps<SegmentedButtonGroupOption>,\n    \"$size\" | \"disabled\"\n  >\n>;\n\nconst Container = styled.div<ContainerProps>`\n  ${(p) => p.theme.flex.row}\n  width: fit-content;\n  overflow: hidden;\n  background-color: #f8fafc;\n  transition: background-color 0.2s ease;\n  padding: 2px;\n  border-radius: ${(p) => p.theme.radius.xxxs}px;\n\n  ${({ disabled }) => {\n    if (disabled) {\n      return css`\n        background-color: ${(p) => p.theme.colors.button.disabled};\n      `;\n    }\n    return undefined;\n  }}\n`;\n"],"names":["SegmentedButtonGroup","props","ref","option","$size","active","disabled","onActiveChange","_ref","containerProps","innerActive","setActive","useState","_active","jsx","Container","element","item","isActive","overrideProperties","_a","createElement","SegmentedButton","event","_b","SegmentedButtonGroupWithRef","fixedForwardRef","styled","p","css"],"mappings":"oVA2CO,MAAAA,EAAA,CAAAC,EAAAC,IAAA,CAML,KAAA,CAAM,OAAAC,EACJ,MAAAC,EAAA,SACQ,OAAAC,EACR,SAAAC,EAAA,GACW,eAAAC,EACX,KAAAC,EACA,GAAAC,CACG,EAAAR,EAEL,CAAAS,EAAAC,CAAA,EAAAC,EAAA,SAAA,IACE,OAAAP,GAAA,SAAgCA,EAChC,EAAO,EAETQ,EAAA,OAAAR,GAAA,SAAAA,EAAAK,EACA,OAAAI,EACEC,EAAC,CAAA,GAAAN,EACK,MAAAL,EACJ,SAAAE,EACA,IAAAU,GAAA,CAEE,GAAAR,EAAA,CACE,GAAA,OAAAA,GAAA,WAAA,CACEA,EAAAQ,CAAA,EACA,OAEF,YAAAR,IAAuBA,EAAA,QAAAQ,GAEzB,GAAAd,EAAA,CACE,GAAA,OAAAA,GAAA,WAAA,CACEA,EAAAc,CAAA,EACA,OAEF,YAAAd,IAAsBA,EAAA,QAAAc,GACxB,EACF,SAAAb,EAAA,IAAAc,GAAA,OAGE,MAAAC,EAAAL,IAAAI,EAAA,IACAE,EAAA,CAAA,MAAAf,GAIA,OAAAE,IAAca,EAAA,SAAA,IACdb,GAAA,CAAAY,IACEC,EAAA,MAAA,CAA2B,KAAAC,EAAAH,EAAA,aAAA,YAAAG,EAAA,QAAA,CAAA,EACM,gBAAA,aACd,GAGrBC,EAAA,cACEC,EAAC,CAAA,GAAAL,EAAA,WACU,GAAAE,EACL,QAAAD,EACK,QAAAK,GAAA,SAEPjB,GACAO,IAAAI,EAAA,OACAO,GAAAJ,EAAAH,EAAA,aAAA,YAAAG,EAAA,UAAA,MAAAI,EAAA,KAAAJ,EAAAG,GACAhB,GAAA,MAAAA,EAAAU,EAAA,IAAAM,GACAZ,EAAAM,EAAA,GAAA,EAAkB,EACpB,IAAAA,EAAA,GACU,CAAA,CACZ,CAAA,CAEH,CAAA,CAGP,EAEOQ,EAAAC,EAAA1B,CAAA,EAUPe,EAAAY,EAAA;AAAA,IAAyBC,GAAAA,EAAA,MAAA,KAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACDA,GAAAA,EAAA,MAAA,OAAA;AAAA;AAAA,IAMiB,CAAA,CAAA,SAAAtB,KAAA,CAGrC,GAAAA,EACE,OAAAuB;AAAAA,4BAAOD,GAAAA,EAAA,MAAA,OAAA,OAAA;AAAA,OAKX;AAAA;;;;;;;;;;"}