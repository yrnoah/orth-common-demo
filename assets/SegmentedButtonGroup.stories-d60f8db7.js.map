{"version":3,"file":"SegmentedButtonGroup.stories-d60f8db7.js","sources":["../../../paas-library/src/Buttons/SegmentedButton/SegmentedButtonGroup.tsx"],"sourcesContent":["import { ComponentPropsWithRef, forwardRef, useState } from \"react\";\nimport { SegmentedButton, type SegmentedButtonProps } from \"./SegmentedButton\";\nimport styled, { css } from \"styled-components\";\n\nexport type SegmentedButtonGroupOption = {\n  properties: Omit<ComponentPropsWithRef<typeof SegmentedButton>, \"$active\">;\n  key: string;\n};\n\nexport interface SegmentedButtonGroupProps\n  extends ComponentPropsWithRef<\"div\"> {\n  /** @description option.key | option.key array */\n  active?: string;\n  onActiveChange?: (\n    activeKey: string,\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => void;\n  /** @description button array */\n  option: SegmentedButtonGroupOption[];\n  /**\n   * @default false\n   * @description\n   * override single button $instance;\n   * when true: width=fit-content | min-width=unset\n   * when false width=auto | min-width=64\n   */\n  $instance?: boolean;\n  /**\n   * @default medium\n   * @description\n   * override single button $size;\n   * small: min-height=32, horizontal-padding=6 | medium: min-height=36, horizontal-padding=12\n   */\n  $size?: SegmentedButtonProps[\"$size\"];\n  /**\n   * @default false\n   * @description override single button disable;\n   */\n  disabled?: boolean;\n}\n\n/**\n * @design https://www.figma.com/design/JGFHYME2p7RpeMYcoMqooS/ODE-Library-1.0?node-id=6011-9842&t=FAzx6jwix7ISvVDA-4\n * @description radio (single) active\n */\nexport const SegmentedButtonGroup = forwardRef<\n  HTMLDivElement,\n  SegmentedButtonGroupProps\n>((props, ref) => {\n  const {\n    option,\n    $instance = false,\n    $size = \"medium\",\n    active,\n    disabled = false,\n    onActiveChange,\n    ...containerProps\n  } = props;\n  const [innerActive, setActive] = useState(() => {\n    if (typeof active === \"string\") return active;\n    return \"\";\n  });\n  const _active = typeof active === \"string\" ? active : innerActive;\n  return (\n    <Container {...containerProps} $size={$size} disabled={disabled} ref={ref}>\n      {option.map((item) => {\n        const isActive = _active === item.key;\n        const overrideProperties: Partial<\n          ComponentPropsWithRef<typeof SegmentedButton>\n        > = { $size, $instance };\n        /** override disabled, control by parent */\n        if (disabled) overrideProperties.disabled = true;\n        if (disabled && !isActive) {\n          overrideProperties.style = {\n            ...(item.properties?.style || {}),\n            backgroundColor: \"transparent\",\n          };\n        }\n        return (\n          <SegmentedButton\n            {...item.properties}\n            {...overrideProperties}\n            $active={isActive}\n            onClick={(event) => {\n              if (disabled) return;\n              if (_active === item.key) return;\n              item.properties?.onClick?.(event);\n              onActiveChange?.(item.key, event);\n              setActive(item.key);\n            }}\n            key={item.key}\n          />\n        );\n      })}\n    </Container>\n  );\n});\n\ntype ContainerProps = Required<\n  Pick<SegmentedButtonGroupProps, \"$size\" | \"disabled\">\n>;\n\nconst Container = styled.div<ContainerProps>`\n  ${(p) => p.theme.flex.row}\n  width: fit-content;\n  overflow: hidden;\n  background-color: #f8fafc;\n  transition: background-color 0.2s ease;\n  ${({ $size, theme }) => {\n    if ($size === \"large\") {\n      return css`\n        padding: 4px;\n        border-radius: ${theme.radius.s}px;\n      `;\n    }\n    return css`\n      padding: 2px;\n      border-radius: ${theme.radius.xxxs}px;\n    `;\n  }}\n\n  ${({ disabled }) => {\n    if (disabled) {\n      return css`\n        background-color: transparent;\n      `;\n    }\n    return undefined;\n  }}\n`;\n"],"names":["SegmentedButtonGroup","forwardRef","props","ref","option","$size","active","onActiveChange","containerProps","innerActive","setActive","useState","_active","jsx","Container","disabled","item","isActive","overrideProperties","$instance","_a","createElement","SegmentedButton","event","styled","div","row","css"],"mappings":"sPA6CO,MAAAA,EAAAC,EAAA,WAAA,CAAAC,EAAAC,IAAA,CAIL,KAAA,CAAM,OAAAC,EACJA,UAAAA,EAAAA,GACY,MAAAC,EAAA,SACJ,OAAAC,EACRA,SAAAA,EAAAA,GACW,eAAAC,EACXA,GAAAA,CACGC,EAAAA,EAEL,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,IACE,OAAAL,GAAA,SAAgCA,EAChC,EAAO,EAETM,EAAA,OAAAN,GAAA,SAAAA,EAAAG,EACA,OAAAI,MAAAC,EAAA,CAAA,GAAAN,EAAA,MAAAH,EAAA,SAAAU,EAAA,IAAAZ,EAAA,SAAAC,EAAA,IAAAY,GAAA,OAGM,MAAAC,EAAAL,IAAAI,EAAA,IACAE,EAAA,CAEI,MAAAb,EAAEA,UAAAA,CAAOc,EAEb,OAAAJ,IAAcG,EAAAA,SAAAA,IACdH,GAAA,CAAAE,IACEC,EAAAA,MAAAA,CAA2B,KAAAE,EAAAJ,EAAA,aAAA,YAAAI,EAAA,QAAA,CAAA,EACM,gBAAA,aACd,GAGrBC,gBAAAC,EAAA,CAAA,GAAAN,EAAA,WAAA,GAAAE,EAAA,QAAAD,EAAA,QAAAM,GAAA,SAMMR,GACAH,IAAAI,EAAA,OACAA,GAAAA,EAAAA,EAAAA,aAAAA,YAAAA,EAAAA,UAAAA,MAAAA,EAAAA,KAAAA,EAAAA,GACAT,GAAAA,MAAAA,EAAAA,EAAAA,IAAAA,GACAG,EAAAA,EAAAA,GAAAA,EAAkB,EAAA,IAAAM,EAAA,GAAA,CAAA,CAGpB,CAAA,CAAA,CAAA,CAKZ,CAAA,EAMAF,EAAAU,EAAA;AAAA,IAAyBC,GAAAA,EAAAA,MAAAA,KAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,IACDC,CAAAA,CAKnB,MAAArB,EAAEA,MAAAA,CAAa,IAChBA,IAAA,QACEsB;AAAAA;AAAAA,yBAAOA,EAAAA,OAAAA;AAAAA,QAKTA;AAAAA;AAAAA,uBAAOA,EAAAA,OAAAA;AAAAA;AAAAA;AAAAA,IAIT,CAAA,CAEG,SAAAZ,CAAW,IAAA,CACZ,GAAAA,EACE,OAAAY;AAAAA;AAAAA,OAKJ;AAAA;;;;;;;;;;;;"}