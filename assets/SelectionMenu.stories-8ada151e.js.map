{"version":3,"file":"SelectionMenu.stories-8ada151e.js","sources":["../../../paas-library/src/utils/component.ts","../../../paas-library/src/Dropdown/Selection/SelectMenu.tsx"],"sourcesContent":["import { forwardRef } from \"react\";\n\n/**\n * @description fix generic type with forwardRef\n * @reference https://www.totaltypescript.com/forwardref-with-generic-components\n */\nexport function fixedForwardRef<T, P = {}>(\n  render: React.ForwardRefRenderFunction<T, P>\n): (props: P & React.RefAttributes<T>) => React.ReactNode {\n  return forwardRef(render) as any;\n}\n","import { memo, useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { SelectionTrigger } from \"./Trigger\";\nimport { BaseDropdown, type DropdownProps } from \"../Dropdown\";\nimport styled, { css } from \"styled-components\";\nimport { fixedForwardRef } from \"../../utils/component\";\nimport useCurrent from \"../../hooks/useCurrent\";\nimport { IconCheckSmall } from \"../../icons\";\n\nconst defaultWidth = 136;\nconst defaultHeight = 24;\nconst defaultRect: { width: number; height: number } = {\n  width: defaultWidth,\n  height: defaultHeight,\n};\n\nexport type BaseOption = { key: string; text?: string };\n\ninterface SelectMenuProps<TOption extends BaseOption>\n  extends Omit<\n    React.ComponentPropsWithRef<typeof SelectionTrigger>,\n    \"$open\" | \"onSelect\"\n  > {\n  /** @description selected item key */\n  selected?: string;\n  /**\n   * @default []\n   * @type TOption extends { key: string; text?: string }\n   */\n  options?: TOption[];\n  /**\n   * @description will be fired when option selected, if param is null -> reset state\n   */\n  onSelect?: (item: TOption | null) => void;\n  /** @description if set, options will insert a rest option with provided text to reset */\n  resetText?: string;\n  /** @default false */\n  defaultOpen?: boolean;\n  /** @description props of ui/Dropdown/BaseDropdown */\n  dropdownConfig?: Omit<\n    DropdownProps,\n    | \"children\"\n    | \"overlay\"\n    | \"position\"\n    | \"visible\"\n    | \"onVisibleChange\"\n    | \"fitToTrigger\"\n  >;\n}\n\n/** @description design https://www.figma.com/design/JGFHYME2p7RpeMYcoMqooS/ODE-Library-1.0?node-id=8806-5741&t=a5kq8b0LVuQVrQrr-4 */\nexport const RawSelectMenu = <TOption extends BaseOption>(\n  props: SelectMenuProps<TOption>,\n  ref: React.ForwardedRef<HTMLButtonElement>\n) => {\n  const {\n    defaultOpen,\n    dropdownConfig,\n    onSelect,\n    options,\n    selected,\n    resetText,\n    ...triggerProps\n  } = props;\n  const [triggerRect, setRect] = useState(defaultRect);\n  const [_open, setOpen] = useState(() => !!defaultOpen);\n  const [_selected, setInnerSelected] = useState<string | null>(() => {\n    if (selected && options) {\n      if (options.find((o) => o.key === selected)) return selected;\n      // option not found;\n    }\n    return null;\n  });\n  const currentSelected = typeof selected === \"string\" ? selected : _selected;\n  const selectedItem = useMemo(() => {\n    if (typeof currentSelected !== \"string\") return null;\n    if (!options) return null;\n    const _item = options.find((o) => o.key === currentSelected);\n    return _item || null;\n  }, [currentSelected, options]);\n  const overlayContainerStyle = useMemo(\n    () => ({\n      ...(dropdownConfig?.overlayContainerStyle || {}),\n      width: triggerRect.width,\n    }),\n    [triggerRect.width, dropdownConfig?.overlayContainerStyle]\n  );\n  const onVisibleChange = useCallback((v: boolean) => setOpen(v), []);\n  const onTriggerClick = useCallback(() => {\n    if (triggerProps.disabled) return;\n    setOpen((pre) => !pre);\n  }, [triggerProps.disabled]);\n  const disabled = !!triggerProps.disabled;\n  const onOptionSelect = useCallback(\n    (item: unknown) => {\n      setOpen(false);\n      if (disabled) return;\n      // reset\n      if (!item) {\n        if (onSelect) onSelect(null);\n        setInnerSelected(null);\n        return;\n      }\n      const _target = item as TOption;\n      // equal to current\n      if (_target.key === currentSelected) return;\n      // select\n      if (onSelect) onSelect(_target);\n      setInnerSelected(_target.key);\n    },\n    [onSelect, disabled, currentSelected]\n  );\n  return (\n    <BaseDropdown\n      disableAnimation\n      {...dropdownConfig}\n      visible={_open}\n      fitToTrigger\n      overlayContainerStyle={overlayContainerStyle}\n      onVisibleChange={onVisibleChange}\n      overlay={\n        <Overlay\n          options={options}\n          disabled={disabled}\n          onSelect={onOptionSelect}\n          selected={currentSelected}\n          resetText={resetText}\n          visible={_open}\n        />\n      }\n    >\n      <SelectionTrigger\n        {...triggerProps}\n        $open={_open}\n        onClick={onTriggerClick}\n        $text={\n          selectedItem?.text ??\n          selectedItem?.key ??\n          currentSelected ??\n          selected ??\n          undefined\n        }\n        ref={(element) => {\n          if (!element) return;\n          const rect = element.getBoundingClientRect();\n          const to = {\n            width: rect.width || defaultWidth,\n            height: rect.height || defaultHeight,\n          };\n          if (\n            to.width !== triggerRect.width ||\n            to.height !== triggerRect.height\n          ) {\n            setRect(to);\n          }\n          if (!ref) return;\n          if (typeof ref === \"function\") {\n            ref(element);\n            return;\n          }\n          ref.current = element;\n        }}\n      />\n    </BaseDropdown>\n  );\n};\n\ninterface OverlayProps<TOption extends BaseOption> {\n  /** @description */\n  selected?: string | null;\n  /** @default [] */\n  options?: SelectMenuProps<TOption>[\"options\"];\n  onSelect?: SelectMenuProps<TOption>[\"onSelect\"];\n  /** @description if set, options will inset one item with text provided to reset selected */\n  resetText?: string;\n  disabled?: boolean;\n  visible: boolean;\n}\n\nconst Overlay = memo(\n  <TOption extends BaseOption>(props: OverlayProps<TOption>) => {\n    const { options, disabled, onSelect, resetText, selected, visible } = props;\n    const refDict = useRef<Record<string, HTMLLIElement | null>>({});\n    const currentSelected = useCurrent(selected);\n    // scroll selected into view\n    useEffect(() => {\n      if (!visible) return;\n      if (!currentSelected.current) return;\n      if (!refDict.current[currentSelected.current]) return;\n      refDict.current[currentSelected.current]?.scrollIntoView();\n    }, [currentSelected, refDict, visible]);\n    if (!options || disabled) return null;\n    return (\n      <OptionsWrapper\n        onScroll={(e) => {\n          e.stopPropagation();\n          e.preventDefault();\n        }}\n      >\n        {!!resetText && (\n          <Option\n            onClick={() => {\n              if (onSelect) onSelect(null);\n            }}\n          >\n            {resetText}\n          </Option>\n        )}\n        {options.map((item) => (\n          <Option\n            ref={(element) => {\n              refDict.current[item.key] = element;\n            }}\n            key={item.key}\n            $active={item.key === selected}\n            onClick={() => {\n              if (onSelect) onSelect(item);\n            }}\n          >\n            <SelectedIcon />\n            <span>{item.text ?? item.key}</span>\n          </Option>\n        ))}\n      </OptionsWrapper>\n    );\n  }\n);\n\nexport const SelectMenu = fixedForwardRef(RawSelectMenu);\n\nconst SelectedIcon = styled(IconCheckSmall)`\n  width: 16px;\n  height: 16px;\n  color: ${(p) => p.theme.colors.textInput.default};\n  position: absolute;\n  left: 12px;\n  top: 8px;\n  opacity: 0;\n  pointer-events: none;\n`;\n\nexport const Option = styled.li<{ $active?: boolean }>`\n  ${(p) => p.theme.flex.row}\n  width: 100%;\n  padding: 8px 12px 8px 36px;\n  overflow: hidden;\n  background-color: #fff;\n  position: relative;\n\n  ${({ $active }) =>\n    $active &&\n    css`\n      ${SelectedIcon} {\n        opacity: 1;\n      }\n    `}\n\n  &:hover {\n    background-color: ${(p) => p.theme.colors.button.hovered};\n  }\n`;\n\nexport const OptionsWrapper = styled.ul`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  ${(p) => p.theme.fonts[\"Caption-Large/Bold\"]}\n  color: ${(p) => p.theme.colors.textInput.default};\n  width: 100%;\n  max-height: 70vh;\n  overflow-y: auto;\n  ${(p) => p.theme.scrollbar}\n  border-radius: ${(p) => p.theme.radius.xxxxs}px;\n  border: 1px solid ${(p) => p.theme.colors.button.hovered};\n  background-color: #fff;\n`;\n"],"names":["fixedForwardRef","render","forwardRef","defaultWidth","defaultHeight","defaultRect","RawSelectMenu","props","ref","defaultOpen","dropdownConfig","onSelect","options","selected","resetText","triggerProps","triggerRect","setRect","useState","_open","setOpen","_selected","setInnerSelected","o","currentSelected","selectedItem","useMemo","overlayContainerStyle","width","onVisibleChange","useCallback","v","onTriggerClick","disabled","onOptionSelect","item","_target","jsx","BaseDropdown","Overlay","SelectionTrigger","element","rect","to","memo","visible","refDict","useRef","useCurrent","useEffect","jsxs","OptionsWrapper","e","Option","SelectedIcon","SelectMenu","styled","IconCheckSmall","p","li","row","$active","css","ul","default","scrollbar","xxxxs"],"mappings":"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"}