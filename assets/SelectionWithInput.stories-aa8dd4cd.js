import{j as e}from"./jsx-runtime-94f6e698.js";import{r as d}from"./index-8db94870.js";import{f as K}from"./component-afc23ed8.js";import{i as Q}from"./keyCode-5935525e.js";import{B as Y}from"./Dropdown-02d796e2.js";import{d as G,O as J,a as U,b as X,c as k}from"./Overlay-3a37e5a2.js";import{T as Z,I as P,a as ee}from"./Trigger-e44b4f5c.js";import{p as R}from"./styled-components.browser.esm-6dd904cc.js";import"./_commonjsHelpers-042e6b4d.js";import"./Portal-01fdeda0.js";import"./index-8ce4a492.js";import"./useCurrent-3439251d.js";import"./useMeasure-2fb4c371.js";import"./IconCheckSmall-4add6247.js";import"./IconArrowSm-8c383373.js";import"./emotion-unitless.esm-acc3a66a.js";const p=(l,s)=>{var j,q,O;const{defaultOpen:m,dropdownConfig:a,onSelectChange:h,options:u,selected:y,resetText:L,_ref:D,inputProps:i,disableFilter:_=!1,...o}=l,[g,E]=d.useState(G),[x,c]=d.useState(()=>!!m),[$,b]=d.useState(!1),[V,v]=d.useState(y||null),r=typeof y=="string"?y:V,f=d.useMemo(()=>typeof r!="string"||!u?null:u.find(n=>n.key===r)||null,[r,u]),H=d.useMemo(()=>u?$&&r!=null&&r.length&&!_?u.filter(t=>!!(t.key.match(r)||t.text&&t.text.toLowerCase().match(r.toLowerCase()))):u:[],[u,$,r,_]),B=d.useMemo(()=>({...(a==null?void 0:a.overlayContainerStyle)||{},width:g.width}),[g.width,a==null?void 0:a.overlayContainerStyle]),N=t=>{t||(h==null||h(V,"select"),b(!1)),c(t)},z=d.useCallback(t=>{t.target.tagName!=="INPUT"&&(o.disabled||c(n=>!n))},[o.disabled]),S=!!o.disabled,W=d.useCallback(t=>{if(S)return;if(!t){v(null),c(!1);return}const n=t;n.key!==r&&(v(n.key),c(!1))},[S,r]);let A=(f==null?void 0:f.text)??(f==null?void 0:f.key)??r??y??void 0;return(j=o.style)!=null&&j.position&&((q=o.style)==null||delete q.position),e.jsx(Y,{disableAnimation:!0,...a,visible:x,overlayContainerStyle:B,onVisibleChange:N,overlay:e.jsx(J,{options:H,disabled:S,onSelect:W,selected:r,resetText:L,visible:x}),children:e.jsxs(ne,{$width:(O=o.style)==null?void 0:O.width,children:[e.jsx(te,{...o,$open:x,onClick:z,ref:t=>{if(!t)return;const n=t.getBoundingClientRect(),T={width:n.width||U,height:n.height||X};(T.width!==g.width||T.height!==g.height)&&E(T),k(t,D),k(t,s)},children:e.jsx(Z,{})}),e.jsx(P,{...i,disabled:o.disabled||(i==null?void 0:i.disabled),readOnly:o.disabled||(i==null?void 0:i.readOnly),type:"text",value:x?r||"":A||"",placeholder:o.$placeholder,onFocus:t=>{var n;(n=i==null?void 0:i.onFocus)==null||n.call(i,t),b(!0),c(!0)},onChange:t=>{const n=t.target.value||"";h&&h(n||null,"input"),v(n||null)},onKeyDown:t=>{var n;(n=i==null?void 0:i.onKeyDown)==null||n.call(i,t),Q(t)&&(t.currentTarget.blur(),c(!1),b(!1))}})]})})},C=K(p),te=R(ee)`
  width: 100%;
`,ne=R.div`
  position: relative;
  width: 100%;

  ${({$width:l})=>l?{width:l}:void 0}
`;try{p.displayName="SelectFilterInput",p.__docgenInfo={description:"",displayName:"SelectFilterInput",props:{children:{defaultValue:null,description:"@description Slot for custom nodes, usually use $text will be fine.\nString type children with `TextContainer` has conflict with $text, so it's blocked when $text exists;",name:"children",required:!1,type:{name:"ReactNode"}},selected:{defaultValue:null,description:"@description selected item key",name:"selected",required:!1,type:{name:"string"}},$size:{defaultValue:{value:'"small"'},description:`@description only effect height currently;
default width 136;
when small height = 24;
when medium height = 32`,name:"$size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'}]}},_ref:{defaultValue:null,description:`@description if fixedForwardRef & ref not work, try _ref
@todo should fix when react19 release`,name:"_ref",required:!1,type:{name:"ForwardedRef<HTMLButtonElement>"}},$text:{defaultValue:null,description:"@description display text",name:"$text",required:!1,type:{name:"string"}},$placeholder:{defaultValue:null,description:"@description when selected not provided and $placeholder existed, render $placeholder",name:"$placeholder",required:!1,type:{name:"string"}},options:{defaultValue:{value:"[]"},description:"",name:"options",required:!1,type:{name:"TOption extends { key: string; text?: string }"}},resetText:{defaultValue:null,description:"@description if set, options will insert a rest option with provided text to reset",name:"resetText",required:!1,type:{name:"string"}},defaultOpen:{defaultValue:{value:"false"},description:"",name:"defaultOpen",required:!1,type:{name:"boolean"}},dropdownConfig:{defaultValue:null,description:"@description props of ui/Dropdown/BaseDropdown",name:"dropdownConfig",required:!1,type:{name:'Omit<DropdownProps, "children" | "visible" | "overlay" | "position" | "onVisibleChange" | "fitToTrigger">'}},disableFilter:{defaultValue:null,description:"",name:"disableFilter",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"",name:"inputProps",required:!1,type:{name:'Omit<Omit<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "ref"> & { ...; }, "value" | ... 2 more ... | "autoFocus">'}},onSelectChange:{defaultValue:null,description:"",name:"onSelectChange",required:!1,type:{name:'((item: string | TOption | null, type: "input" | "select") => void)'}}}}}catch{}try{C.displayName="SelectFilterInputWithRef",C.__docgenInfo={description:"",displayName:"SelectFilterInputWithRef",props:{children:{defaultValue:null,description:"@description Slot for custom nodes, usually use $text will be fine.\nString type children with `TextContainer` has conflict with $text, so it's blocked when $text exists;",name:"children",required:!1,type:{name:"ReactNode"}},selected:{defaultValue:null,description:"@description selected item key",name:"selected",required:!1,type:{name:"string"}},$size:{defaultValue:{value:'"small"'},description:`@description only effect height currently;
default width 136;
when small height = 24;
when medium height = 32`,name:"$size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'}]}},_ref:{defaultValue:null,description:`@description if fixedForwardRef & ref not work, try _ref
@todo should fix when react19 release`,name:"_ref",required:!1,type:{name:"ForwardedRef<HTMLButtonElement>"}},$text:{defaultValue:null,description:"@description display text",name:"$text",required:!1,type:{name:"string"}},$placeholder:{defaultValue:null,description:"@description when selected not provided and $placeholder existed, render $placeholder",name:"$placeholder",required:!1,type:{name:"string"}},options:{defaultValue:{value:"[]"},description:"",name:"options",required:!1,type:{name:"TOption extends { key: string; text?: string }"}},resetText:{defaultValue:null,description:"@description if set, options will insert a rest option with provided text to reset",name:"resetText",required:!1,type:{name:"string"}},defaultOpen:{defaultValue:{value:"false"},description:"",name:"defaultOpen",required:!1,type:{name:"boolean"}},dropdownConfig:{defaultValue:null,description:"@description props of ui/Dropdown/BaseDropdown",name:"dropdownConfig",required:!1,type:{name:'Omit<DropdownProps, "children" | "visible" | "overlay" | "position" | "onVisibleChange" | "fitToTrigger">'}},disableFilter:{defaultValue:null,description:"",name:"disableFilter",required:!1,type:{name:"boolean"}},inputProps:{defaultValue:null,description:"",name:"inputProps",required:!1,type:{name:'Omit<Omit<DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "ref"> & { ...; }, "value" | ... 2 more ... | "autoFocus">'}},onSelectChange:{defaultValue:null,description:"",name:"onSelectChange",required:!1,type:{name:'((item: string | BaseOption | null, type: "input" | "select") => void)'}}}}}catch{}const Se={title:"ODE Library/Selection/SelectWithInput",tags:["autodocs"],component:p,argTypes:{children:{table:{disable:!0}},$text:{table:{disable:!0}},$size:{control:"select",options:["small","medium"]}}},ie=[{key:"true",text:"about true text"},{key:"false",text:"about false text"},{key:"none",text:"none"}],re=Array.from({length:200}).map((l,s)=>({key:`option_${s+1}`,text:`option ${s+1}`}));function le({...l}){const{style:s,...m}=l;return e.jsxs(e.Fragment,{children:[e.jsx("a",{target:"blank",href:"https://www.figma.com/design/JGFHYME2p7RpeMYcoMqooS/ODE-Library-1.0?node-id=8806-5741&t=a5kq8b0LVuQVrQrr-4",rel:"noreferrer",children:"design reference"}),e.jsx("br",{}),e.jsx("br",{}),e.jsx("h4",{children:"- trigger with input"}),e.jsx("br",{}),e.jsx(p,{...m,style:{width:150}}),e.jsx("br",{}),e.jsx("br",{}),e.jsx("h4",{children:"- default open = true"}),e.jsx("br",{}),e.jsx(p,{...m,defaultOpen:!0,style:s}),e.jsx("br",{}),e.jsx("br",{}),e.jsx("div",{style:{height:"200vh"}}),e.jsxs("h4",{children:["- trigger with auto position (top or bottom) ",e.jsx("br",{}),"- if bottom & options' height is larger than window's height, options will be fix to fit window's bottom"]}),e.jsx("br",{}),e.jsx(p,{...m,options:re,style:s,_ref:a=>{console.info("get trigger element from _ref",a)}}),e.jsx("br",{}),e.jsx("br",{}),e.jsx("div",{style:{height:"200vh"}})]})}const w={render:le,args:{$size:"small",$placeholder:"select value",defaultOpen:!1,disabled:!1,style:{width:"50vw"},dropdownConfig:{triggerType:"click"},options:ie,resetText:"-- please choose",onSelectChange:(l,s)=>console.info("onSelect",l,s)}};var F,I,M;w.parameters={...w.parameters,docs:{...(F=w.parameters)==null?void 0:F.docs,source:{originalSource:`{
  render: SelectMenuStory,
  args: {
    $size: "small",
    $placeholder: "select value",
    defaultOpen: false,
    disabled: false,
    style: {
      width: "50vw"
    },
    dropdownConfig: {
      triggerType: "click"
    },
    options,
    resetText: "-- please choose",
    onSelectChange: (item, type) => console.info("onSelect", item, type)
  }
}`,...(M=(I=w.parameters)==null?void 0:I.docs)==null?void 0:M.source}}};const Te=["SelectionWithInput"];export{w as SelectionWithInput,Te as __namedExportsOrder,Se as default};
//# sourceMappingURL=SelectionWithInput.stories-aa8dd4cd.js.map
