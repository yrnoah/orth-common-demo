{"version":3,"file":"SelectionWithInput.stories-b046431d.js","sources":["../../../paas-library/src/Dropdown/Selection/SelectFilterInput.tsx"],"sourcesContent":["import { useCallback, useMemo, useState } from \"react\";\nimport { fixedForwardRef } from \"../../utils/component\";\nimport { isKeyEnter } from \"../../utils/keyCode\";\nimport { BaseDropdown } from \"../Dropdown\";\nimport { bindRef, defaultHeight, defaultRect, defaultWidth } from \"./common\";\nimport { Overlay } from \"./Overlay\";\nimport { Input, Trigger, TriggerIcon } from \"./Trigger\";\nimport { type BaseOption, type SelectMenuProps } from \"./types\";\nimport styled from \"styled-components\";\n\ntype SelectFilterInputProps<TOption extends BaseOption> = Omit<\n  SelectMenuProps<TOption>,\n  \"onSelect\"\n> & {\n  disableFilter?: boolean;\n  inputProps?: Omit<\n    React.ComponentPropsWithRef<\"input\">,\n    \"value\" | \"defaultValue\" | \"autoFocus\" | \"onChange\"\n  >;\n  onSelectChange?: (\n    item: TOption | null | string,\n    type: \"select\" | \"input\"\n  ) => void;\n};\n\n/** @design https://www.figma.com/design/6Cm9Jlra5K0OXKSZNRKOhI/Studio-Apps-%7C-ODE-1.1.0-%5B24Q3%5D?node-id=7550-37679&t=LDWGOkSu6EGbzLFX-4 */\nexport const SelectFilterInput = <TOption extends BaseOption>(\n  props: SelectFilterInputProps<TOption>,\n  ref: React.ForwardedRef<HTMLButtonElement>\n) => {\n  const {\n    defaultOpen,\n    dropdownConfig,\n    onSelectChange,\n    options,\n    selected,\n    resetText,\n    _ref,\n    inputProps,\n    disableFilter = false,\n    ...triggerProps\n  } = props;\n  const [triggerRect, setRect] = useState(defaultRect);\n  const [_open, setOpen] = useState(() => !!defaultOpen);\n  const [inputFocused, setInputFocused] = useState(false);\n  const [_selected, setInnerSelected] = useState<string | null>(\n    selected || null\n  );\n  const currentSelected = typeof selected === \"string\" ? selected : _selected;\n  const selectedItem = useMemo(() => {\n    if (typeof currentSelected !== \"string\") return null;\n    if (!options) return null;\n    const _item = options.find((o) => o.key === currentSelected);\n    return _item || null;\n  }, [currentSelected, options]);\n  const _options = useMemo(() => {\n    if (!options) return [];\n    if (!inputFocused) return options;\n    if (!!currentSelected?.length && !disableFilter) {\n      return options.filter((o) => {\n        if (o.key.match(currentSelected)) return true;\n        if (\n          o.text &&\n          o.text.toLowerCase().match(currentSelected.toLowerCase())\n        ) {\n          return true;\n        }\n        return false;\n      });\n    }\n    return options;\n  }, [options, inputFocused, currentSelected, disableFilter]);\n  const overlayContainerStyle = useMemo(\n    () => ({\n      ...(dropdownConfig?.overlayContainerStyle || {}),\n      width: triggerRect.width,\n    }),\n    [triggerRect.width, dropdownConfig?.overlayContainerStyle]\n  );\n  const onVisibleChange = (v: boolean) => {\n    if (!v) {\n      onSelectChange?.(_selected, \"select\");\n      setInputFocused(false);\n    }\n    setOpen(v);\n  };\n  const onTriggerClick = useCallback(\n    (e: React.MouseEvent) => {\n      if ((e.target as Element).tagName === \"INPUT\") return;\n      if (triggerProps.disabled) return;\n      setOpen((pre) => !pre);\n    },\n    [triggerProps.disabled]\n  );\n  const disabled = !!triggerProps.disabled;\n  const onOptionSelect = useCallback(\n    (item: unknown) => {\n      if (disabled) return;\n      // reset\n      if (!item) {\n        setInnerSelected(null);\n        setOpen(false);\n        return;\n      }\n      const _target = item as TOption;\n      // equal to current\n      if (_target.key === currentSelected) return;\n      // select\n      setInnerSelected(_target.key);\n      setOpen(false);\n    },\n    [disabled, currentSelected]\n  );\n  let $text =\n    selectedItem?.text ??\n    selectedItem?.key ??\n    currentSelected ??\n    selected ??\n    undefined;\n  /** @description position will break component with div wrapper */\n  if (triggerProps.style?.position) delete triggerProps.style?.position;\n\n  return (\n    <BaseDropdown\n      disableAnimation\n      {...dropdownConfig}\n      visible={_open}\n      overlayContainerStyle={overlayContainerStyle}\n      onVisibleChange={onVisibleChange}\n      overlay={\n        <Overlay\n          options={_options}\n          disabled={disabled}\n          onSelect={onOptionSelect}\n          selected={currentSelected}\n          resetText={resetText}\n          visible={_open}\n        />\n      }\n    >\n      <Container $width={triggerProps.style?.width}>\n        <TriggerButton\n          {...triggerProps}\n          $open={_open}\n          onClick={onTriggerClick}\n          ref={(element) => {\n            if (!element) return;\n            const rect = element.getBoundingClientRect();\n            const to = {\n              width: rect.width || defaultWidth,\n              height: rect.height || defaultHeight,\n            };\n            if (\n              to.width !== triggerRect.width ||\n              to.height !== triggerRect.height\n            ) {\n              setRect(to);\n            }\n            bindRef(element, _ref);\n            bindRef(element, ref);\n          }}\n        >\n          <TriggerIcon />\n        </TriggerButton>\n        <Input\n          {...inputProps}\n          disabled={triggerProps.disabled || inputProps?.disabled}\n          readOnly={triggerProps.disabled || inputProps?.readOnly}\n          type=\"text\"\n          value={_open ? currentSelected || \"\" : $text || \"\"}\n          placeholder={triggerProps.$placeholder}\n          onFocus={(e) => {\n            inputProps?.onFocus?.(e);\n            setInputFocused(true);\n            setOpen(true);\n          }}\n          onChange={(e) => {\n            const inputValue = e.target.value || \"\";\n            if (onSelectChange) onSelectChange(inputValue || null, \"input\");\n            setInnerSelected(inputValue || null);\n          }}\n          onKeyDown={(e) => {\n            inputProps?.onKeyDown?.(e);\n            if (isKeyEnter(e)) {\n              e.currentTarget.blur();\n              setOpen(false);\n              setInputFocused(false);\n            }\n          }}\n        />\n      </Container>\n    </BaseDropdown>\n  );\n};\n\nexport const SelectFilterInputWithRef = fixedForwardRef(SelectFilterInput);\n\nconst TriggerButton = styled(Trigger)`\n  width: 100%;\n`;\n\nconst Container = styled.div<{ $width: React.CSSProperties[\"width\"] }>`\n  position: relative;\n  width: 100%;\n\n  ${({ $width }) => ($width ? { width: $width } : undefined)}\n`;\n"],"names":["SelectFilterInput","props","ref","defaultOpen","dropdownConfig","onSelectChange","options","selected","resetText","_ref","inputProps","disableFilter","triggerProps","triggerRect","setRect","useState","defaultRect","_open","setOpen","inputFocused","setInputFocused","_selected","setInnerSelected","currentSelected","selectedItem","useMemo","o","_options","overlayContainerStyle","onVisibleChange","v","onTriggerClick","useCallback","pre","disabled","onOptionSelect","item","_target","$text","_a","_b","jsx","BaseDropdown","Overlay","jsxs","Container","_c","TriggerButton","element","rect","to","defaultWidth","defaultHeight","bindRef","TriggerIcon","Input","inputValue","isKeyEnter","SelectFilterInputWithRef","fixedForwardRef","styled","Trigger","$width"],"mappings":"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"}