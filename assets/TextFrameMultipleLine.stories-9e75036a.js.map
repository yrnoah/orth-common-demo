{"version":3,"file":"TextFrameMultipleLine.stories-9e75036a.js","sources":["../../../paas-library/src/Textfield/TextFrameMultipleLine.tsx"],"sourcesContent":["import {\n  type ComponentPropsWithRef,\n  forwardRef,\n  useRef,\n  useState,\n} from \"react\";\nimport { ErrorTip } from \"./ErrorTip\";\nimport { FieldLabel } from \"./Label\";\nimport styled from \"styled-components\";\nimport {\n  textfieldFrameInputStyle,\n  type TextfieldFrameInputStyleProps,\n} from \"./styles\";\n\ninterface TextFrameMultipleLineProps extends ComponentPropsWithRef<\"textarea\"> {\n  /**\n   * @default false\n   * @description when true, display word counts on label.\n   */\n  showCount?: boolean;\n  /** @description control input error style & display under input element */\n  errorMessage?: string;\n  /**\n   * @default false\n   * @description error tip block default owns 16px height; when set hasError to false, remove error tip block no matter if error message exists.\n   */\n  hasError?: boolean;\n  /**\n   * @default false\n   * @description will trigger input.select() when true\n   */\n  autoSelect?: boolean;\n  /** @description label text */\n  label?: string;\n  /** @description override FieldLabel props */\n  labelProps?: ComponentPropsWithRef<\"label\">;\n  /** @description override ErrorTip props */\n  errorProps?: ComponentPropsWithRef<typeof ErrorTip>;\n  /**\n   * @default baseColor.Volcano5 `#EE8152`\n   * @description override error color for border & icon\n   */\n  $errorColor?: React.CSSProperties[\"color\"];\n}\n\n/** @design https://www.figma.com/design/JGFHYME2p7RpeMYcoMqooS/ODE-Library-1.0?node-id=7870-18087&t=N8jQZoWKafMhXbWa-4 */\nexport const TextFrameMultipleLine = forwardRef<\n  HTMLTextAreaElement,\n  TextFrameMultipleLineProps\n>((props, ref) => {\n  const _inputRef = useRef<HTMLTextAreaElement | null>(null);\n  const {\n    showCount = false,\n    autoSelect = false,\n    hasError = false,\n    errorMessage,\n    label = \"\",\n    labelProps,\n    errorProps,\n    $errorColor,\n    ...inputParams\n  } = props;\n  const [_value, setValue] = useState(() => {\n    const result = props.value || props.defaultValue;\n    if (result) {\n      if (typeof result === \"string\") return result;\n      if (typeof result === \"number\") return `${result}`;\n      return result.join(\"\");\n    }\n    return \"\";\n  });\n  const counts = _value.length;\n  /** @description sync width to label & error if exists inside input style */\n  const width = props.style?.width ?? 200;\n  const minWidth = props.style?.minWidth;\n  const maxWidth = props.style?.maxWidth;\n  return (\n    <>\n      <FieldLabel\n        {...labelProps}\n        text={label}\n        style={{\n          ...labelDefaultStyles,\n          width,\n          minWidth,\n          maxWidth,\n          ...labelProps?.style,\n        }}\n        $required={inputParams.required}\n      >\n        {showCount && !!counts && <WordCounts>{counts}</WordCounts>}\n      </FieldLabel>\n      <Input\n        /** @description clear auto complete */\n        autoComplete=\"new-password\"\n        {...inputParams}\n        style={{ ...inputDefaultStyles, width, ...inputParams?.style }}\n        $error={!!errorMessage}\n        $errorColor={$errorColor}\n        onChange={(e) => {\n          setValue(e.target.value || \"\");\n          if (props.onChange) props.onChange(e);\n        }}\n        onFocus={(e) => {\n          if (props.onFocus) props.onFocus(e);\n          if (autoSelect && _inputRef.current) _inputRef.current.select();\n        }}\n        ref={(element) => {\n          _inputRef.current = element;\n          if (!ref) return;\n          if (typeof ref === \"function\") {\n            ref(element);\n            return;\n          }\n          if (\"current\" in ref) ref.current = element;\n        }}\n      />\n      {hasError && (\n        <ErrorTip\n          {...errorProps}\n          style={{ width, minWidth, maxWidth, ...errorProps?.style }}\n          message={props.disabled ? undefined : errorMessage}\n          $errorColor={$errorColor}\n        />\n      )}\n    </>\n  );\n});\n\nexport const Input = styled.textarea<TextfieldFrameInputStyleProps>`\n  height: 84px;\n  resize: none;\n  ${textfieldFrameInputStyle}\n  /* to fix browser bug margin bottom: https://bugs.webkit.org/show_bug.cgi?id=32731, https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#baseline_inconsistency */\n  vertical-align: bottom;\n  padding-top: 11px;\n  padding-bottom: 11px;\n  transition: border-color 0.2s ease, color 0.2s ease;\n`;\n\nconst labelDefaultStyles = {\n  display: \"block\",\n  marginBottom: 4,\n} satisfies React.CSSProperties;\n\nconst inputDefaultStyles = {\n  marginBottom: 4,\n} satisfies React.CSSProperties;\n\nexport const WordCounts = styled.span`\n  ${(p) => p.theme.fonts[\"Caption-Large/Bold\"]}\n  color: ${(p) => p.theme.colors.textInput.minor};\n  position: absolute;\n  top: 50%;\n  right: 0;\n  transform: translateY(-50%);\n`;\n"],"names":["TextFrameMultipleLine","forwardRef","props","ref","_inputRef","useRef","showCount","autoSelect","hasError","errorMessage","labelProps","errorProps","$errorColor","inputParams","_value","setValue","useState","result","counts","width","_a","minWidth","_b","maxWidth","_c","jsxs","Fragment","jsx","FieldLabel","label","labelDefaultStyles","style","Input","inputDefaultStyles","e","element","ErrorTip","styled","textarea","WordCounts","span","p"],"mappings":"8YA8CO,MAAAA,EAAAC,EAAA,WAAA,CAAAC,EAAAC,IAAA,WAIL,MAAAC,EAAAC,SAAA,IAAA,EACA,CAAM,UAAAC,EAAA,GACQ,WAAAC,EAAA,GACC,SAAAC,EAAA,GACF,aAAAC,EACXA,MAAAA,EAAAA,GACQ,WAAAC,EACRA,WAAAA,EACAC,YAAAA,EACAC,GAAAA,CACGC,EAAAA,EAEL,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,IAAA,CACE,MAAAC,EAAAf,EAAA,OAAAA,EAAA,aACA,OAAAe,EACE,OAAAA,GAAA,SAAgCA,EAChC,OAAAA,GAAA,SAAgC,GAAAA,IAChCA,EAAA,KAAA,EAAA,EAEF,EAAO,CAAA,EAETC,EAAAJ,EAAA,OAEAK,IAAAC,EAAAlB,EAAA,QAAA,YAAAkB,EAAA,QAAA,IACAC,GAAAC,EAAApB,EAAA,QAAA,YAAAoB,EAAA,SACAC,GAAAC,EAAAtB,EAAA,QAAA,YAAAsB,EAAA,SACA,OAAAC,EAAA,KAAAC,WAAA,CAAA,SAAA,CAEIC,EAAA,IAAAC,EAAA,CAAA,GAAAlB,EAAA,KAAAmB,EAAA,MAAA,CAGS,GAAAC,EACFA,MAAAA,EACHX,SAAAA,EACAE,SAAAA,EACAE,GAAAA,GAAAA,YAAAA,EAAAA,KACeQ,EAAAA,UAAAA,EAAAA,SAAAA,SAAAA,GAAAA,CAAAA,CAAAA,GAAAA,EAAAA,IAAAA,EAAAA,CAAAA,SAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAKnBJ,EAAA,IACAK,EAAC,CAAA,aAAA,eAEc,GAAAnB,EACTA,MAAAA,CACG,GAAAoB,EAAKA,MAAAA,EAAoBd,GAAAA,GAAAA,YAAAA,EAAAA,KAAuBY,EAAM,OAAA,CAAA,CAAAtB,EACnDA,YAAAA,EACV,SAAAyB,GAAA,CAEEnB,EAAAA,EAAAA,OAAAA,OAAAA,EAAAA,EACAb,EAAA,UAAoBA,EAAAA,SAAAA,CAAAA,CAAgB,EACtC,QAAAgC,GAAA,CAEEhC,EAAA,SAAmBA,EAAAA,QAAAA,CAAAA,EACnBK,GAAAH,EAAA,SAAqCA,EAAAA,QAAAA,QAAyB,EAChE,IAAA+B,GAAA,CAGE,GADA/B,EAAAA,QAAAA,EACA,EAAAD,EACA,IAAA,OAAAA,GAAA,WAAA,CACEA,EAAAA,CAAAA,EACA,OAEF,YAAAA,IAAsBA,EAAAA,QAAAA,GAAcgC,CACtC,CAAA,EAAE3B,GAAAmB,EAAAA,IAAAS,EAAA,CAAA,GAAAzB,EAAA,MAAA,CAKO,MAAAQ,EAAEA,SAAAA,EAAOE,SAAAA,EAAUE,GAAAA,GAAAA,YAAAA,EAAAA,KAAyBQ,EAAAA,QAAAA,EAAAA,SAAAA,OAAAA,EAAAA,YAAAA,EAAAA,CAItD,CAAA,CAAA,CAGP,CAAA,EAEOC,EAAAK,EAAA;AAAA;AAAA;AAAA,IAAqBC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EAW5BR,EAAA,CAA2B,QAAA,QAChB,aAAA,CAEX,EAEAG,EAAA,CAA2B,aAAA,CAE3B,EAEOM,EAAAF,EAAA;AAAA,IAA0BG,GAAAA,EAAAA,MAAAA,MAAAA,oBAAAA;AAAAA,WACYC,GAAAA,EAAA,MAAA,OAAA,UAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}