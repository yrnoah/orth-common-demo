{"version":3,"file":"TextFrameMultipleLine.stories-d86ec8e0.js","sources":["../../../paas-library/src/Textfield/TextFrameMultipleLine.tsx"],"sourcesContent":["import {\n  type ComponentPropsWithRef,\n  forwardRef,\n  useRef,\n  useState,\n} from \"react\";\nimport { ErrorTip } from \"./ErrorTip\";\nimport { FieldLabel } from \"./Label\";\nimport styled from \"styled-components\";\nimport {\n  textfieldFrameInputStyle,\n  type TextfieldFrameInputStyleProps,\n} from \"./styles\";\n\ninterface TextFrameMultipleLineProps extends ComponentPropsWithRef<\"textarea\"> {\n  /**\n   * @default false\n   * @description when true, display word counts on label.\n   */\n  showCount?: boolean;\n  /** @description control input error style & display under input element */\n  errorMessage?: string;\n  /**\n   * @default false\n   * @description error tip block default owns 16px height; when set hasError to false, remove error tip block no matter if error message exists.\n   */\n  hasError?: boolean;\n  /**\n   * @default false\n   * @description will trigger input.select() when true\n   */\n  autoSelect?: boolean;\n  /** @description label text */\n  label?: string;\n  /** @description override FieldLabel props */\n  labelProps?: ComponentPropsWithRef<\"label\">;\n  /** @description override ErrorTip props */\n  errorProps?: ComponentPropsWithRef<typeof ErrorTip>;\n  /**\n   * @default baseColor.Volcano5 `#EE8152`\n   * @description override error color for border & icon\n   */\n  $errorColor?: React.CSSProperties[\"color\"];\n}\n\n/** @design https://www.figma.com/design/JGFHYME2p7RpeMYcoMqooS/ODE-Library-1.0?node-id=7870-18087&t=N8jQZoWKafMhXbWa-4 */\nexport const TextFrameMultipleLine = forwardRef<\n  HTMLTextAreaElement,\n  TextFrameMultipleLineProps\n>((props, ref) => {\n  const _inputRef = useRef<HTMLTextAreaElement | null>(null);\n  const {\n    showCount = false,\n    autoSelect = false,\n    hasError = false,\n    errorMessage,\n    label = \"\",\n    labelProps,\n    errorProps,\n    $errorColor,\n    ...inputParams\n  } = props;\n  const [_value, setValue] = useState(() => {\n    const result = props.value || props.defaultValue;\n    if (result) {\n      if (typeof result === \"string\") return result;\n      if (typeof result === \"number\") return `${result}`;\n      return result.join(\"\");\n    }\n    return \"\";\n  });\n  const counts = _value.length;\n  /** @description sync width to label & error if exists inside input style */\n  const width = props.style?.width ?? 200;\n  const minWidth = props.style?.minWidth;\n  const maxWidth = props.style?.maxWidth;\n  return (\n    <>\n      <FieldLabel\n        {...labelProps}\n        text={label}\n        style={{\n          ...labelDefaultStyles,\n          width,\n          minWidth,\n          maxWidth,\n          ...labelProps?.style,\n        }}\n        $required={inputParams.required}\n      >\n        {showCount && !!counts && <WordCounts>{counts}</WordCounts>}\n      </FieldLabel>\n      <Input\n        /** @description clear auto complete */\n        autoComplete=\"new-password\"\n        {...inputParams}\n        style={{ ...inputDefaultStyles, width, ...inputParams?.style }}\n        $error={!!errorMessage}\n        $errorColor={$errorColor}\n        onChange={(e) => {\n          setValue(e.target.value || \"\");\n          if (props.onChange) props.onChange(e);\n        }}\n        onFocus={(e) => {\n          if (props.onFocus) props.onFocus(e);\n          if (autoSelect && _inputRef.current) _inputRef.current.select();\n        }}\n        ref={(element) => {\n          _inputRef.current = element;\n          if (!ref) return;\n          if (typeof ref === \"function\") {\n            ref(element);\n            return;\n          }\n          if (\"current\" in ref) ref.current = element;\n        }}\n      />\n      {hasError && (\n        <ErrorTip\n          {...errorProps}\n          style={{ width, minWidth, maxWidth, ...errorProps?.style }}\n          message={props.disabled ? undefined : errorMessage}\n          $errorColor={$errorColor}\n        />\n      )}\n    </>\n  );\n});\n\nexport const Input = styled.textarea<TextfieldFrameInputStyleProps>`\n  height: 84px;\n  resize: none;\n  ${textfieldFrameInputStyle}\n  /* to fix browser bug margin bottom: https://bugs.webkit.org/show_bug.cgi?id=32731, https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#baseline_inconsistency */\n  vertical-align: bottom;\n  padding-top: 11px;\n  padding-bottom: 11px;\n  transition: border-color 0.2s ease, color 0.2s ease;\n`;\n\nconst labelDefaultStyles = {\n  display: \"block\",\n  marginBottom: 4,\n} satisfies React.CSSProperties;\n\nconst inputDefaultStyles = {\n  marginBottom: 4,\n} satisfies React.CSSProperties;\n\nexport const WordCounts = styled.span`\n  ${(p) => p.theme.fonts[\"Caption-Large/Bold\"]}\n  color: ${(p) => p.theme.colors.textInput.minor};\n  position: absolute;\n  top: 50%;\n  right: 0;\n  transform: translateY(-50%);\n`;\n"],"names":["TextFrameMultipleLine","forwardRef","props","ref","_inputRef","useRef","showCount","autoSelect","hasError","errorMessage","label","labelProps","errorProps","$errorColor","inputParams","_value","setValue","useState","result","counts","width","_a","minWidth","_b","maxWidth","_c","jsxs","Fragment","jsx","FieldLabel","labelDefaultStyles","WordCounts","Input","inputDefaultStyles","e","element","ErrorTip","styled","textfieldFrameInputStyle","p"],"mappings":"ucA8CO,MAAAA,EAAAC,EAAA,WAAA,CAAAC,EAAAC,IAAA,WAIL,MAAAC,EAAAC,SAAA,IAAA,EACA,CAAM,UAAAC,EAAA,GACQ,WAAAC,EAAA,GACC,SAAAC,EAAA,GACF,aAAAC,EACX,MAAAC,EAAA,GACQ,WAAAC,EACR,WAAAC,EACA,YAAAC,EACA,GAAAC,CACG,EAAAZ,EAEL,CAAAa,EAAAC,CAAA,EAAAC,EAAA,SAAA,IAAA,CACE,MAAAC,EAAAhB,EAAA,OAAAA,EAAA,aACA,OAAAgB,EACE,OAAAA,GAAA,SAAgCA,EAChC,OAAAA,GAAA,SAAgC,GAAAA,IAChCA,EAAA,KAAA,EAAA,EAEF,EAAO,CAAA,EAETC,EAAAJ,EAAA,OAEAK,IAAAC,EAAAnB,EAAA,QAAA,YAAAmB,EAAA,QAAA,IACAC,GAAAC,EAAArB,EAAA,QAAA,YAAAqB,EAAA,SACAC,GAAAC,EAAAvB,EAAA,QAAA,YAAAuB,EAAA,SACA,OAAAC,EAAAC,EAAA,CAAA,SAAA,CAEIC,EAAAC,EAAC,CAAA,GAAAlB,EACK,KAAAD,EACE,MAAA,CACC,GAAAoB,EACF,MAAAV,EACH,SAAAE,EACA,SAAAE,EACA,GAAAb,GAAA,YAAAA,EAAA,KACe,EACjB,UAAAG,EAAA,SACuB,SAAAR,GAAA,CAAA,CAAAa,GAAAS,EAAAG,EAAA,CAAA,SAAAZ,EAAA,CAEuB,CAAA,EAChDS,EACAI,EAAC,CAAA,aAAA,eAEc,GAAAlB,EACT,MAAA,CAAA,GAAAmB,EAAA,MAAAb,EAAA,GAAAN,GAAA,YAAAA,EAAA,KAAA,EACyD,OAAA,CAAA,CAAAL,EACnD,YAAAI,EACV,SAAAqB,GAAA,CAEElB,EAAAkB,EAAA,OAAA,OAAA,EAAA,EACAhC,EAAA,UAAoBA,EAAA,SAAAgC,CAAA,CAAgB,EACtC,QAAAA,GAAA,CAEEhC,EAAA,SAAmBA,EAAA,QAAAgC,CAAA,EACnB3B,GAAAH,EAAA,SAAqCA,EAAA,QAAA,QAAyB,EAChE,IAAA+B,GAAA,CAGE,GADA/B,EAAA,QAAA+B,EACA,EAAAhC,EACA,IAAA,OAAAA,GAAA,WAAA,CACEA,EAAAgC,CAAA,EACA,OAEF,YAAAhC,IAAsBA,EAAA,QAAAgC,GAAc,CACtC,CAAA,EACF3B,GAAAoB,EAEEQ,EAAC,CAAA,GAAAxB,EACK,MAAA,CAAA,MAAAQ,EAAA,SAAAE,EAAA,SAAAE,EAAA,GAAAZ,GAAA,YAAAA,EAAA,KAAA,EACqD,QAAAV,EAAA,SAAA,OAAAO,EACnB,YAAAI,CACtC,CAAA,CACF,CAAA,CAAA,CAIR,CAAA,EAEOmB,EAAAK,EAAA;AAAA;AAAA;AAAA,IAAqBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAW5BR,EAAA,CAA2B,QAAA,QAChB,aAAA,CAEX,EAEAG,EAAA,CAA2B,aAAA,CAE3B,EAEOF,EAAAM,EAAA;AAAA,IAA0BE,GAAAA,EAAA,MAAA,MAAA,oBAAA;AAAA,WACYA,GAAAA,EAAA,MAAA,OAAA,UAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}