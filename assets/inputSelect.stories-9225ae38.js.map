{"version":3,"file":"inputSelect.stories-9225ae38.js","sources":["../../../paas-library/src/Dropdown/Selection/DropdownButton.tsx","../../../paas-library/src/utils/optionalFilter.ts","../../../paas-library/src/Dropdown/Selection/InputOption.tsx"],"sourcesContent":["import styled from \"styled-components\";\nimport { colors } from \"../../styles/colors\";\nimport { IconArrowSm } from \"../../icons\";\n\nexport const DropdownButton = styled(IconArrowSm)<{\n  $size: \"small\" | \"medium\";\n}>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: ${(p) => (p.$size === \"small\" ? 2.67 : 4)}px;\n  width: ${(p) => (p.$size === \"small\" ? 16 : 24)}px;\n  height: ${(p) => (p.$size === \"small\" ? 16 : 24)}px;\n  background-color: #fff;\n\n  &:hover {\n    background-color: ${colors.button.hovered};\n  }\n`;\n","export function optionalFilter<T = unknown>(\n  arr: Array<T>,\n  fn: (item: T) => boolean,\n  active = true\n) {\n  return active ? arr.filter(fn) : arr;\n}\n","import { useMemo, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { colors, shadows } from \"../../styles/colors\";\nimport { fonts } from \"../../styles/fonts\";\nimport { BaseDropdown, DropdownProps } from \"../Dropdown\";\nimport { DropdownButton } from \"./DropdownButton\";\nimport { optionalFilter } from \"../../utils/optionalFilter\";\n\nconst defaultWidth = 136;\nconst defaultHeight = 24;\nconst defaultRect: { width: number; height: number } = {\n  width: defaultWidth,\n  height: defaultHeight,\n};\n\nexport interface InputOptionProps\n  extends Omit<DropdownProps, \"children\" | \"visible\"> {\n  /** @default string \"small\" */\n  size?: \"small\" | \"medium\";\n  /** @description control directly input element attributes */\n  inputAttrs?: React.InputHTMLAttributes<HTMLInputElement>;\n  /** @description options as string list */\n  options?: string[];\n  /** @description option style */\n  optionStyle?: React.CSSProperties;\n  /** @description wrapper style */\n  wrapperStyle?: React.CSSProperties;\n  /** @description current input value */\n  value?: string;\n  /** @description set value */\n  setValue?: (value: string) => void;\n  /** @description are options can be filtered by the input value @default false */\n  enableFilterOption?: boolean;\n  /** @description is the dropdown start with visible */\n  defaultVisible?: boolean;\n}\n\n//TODO: handle no option cases https://orthogonalpub.atlassian.net/browse/REQ-647\n\n/** @design https://www.figma.com/design/JGFHYME2p7RpeMYcoMqooS/ODE-Library-1.0?node-id=5358-24798&t=XZTN1PE3CDllHgtD-4 */\nexport function InputOption({\n  inputAttrs,\n  defaultVisible,\n  options,\n  optionStyle,\n  size = \"small\",\n  value,\n  setValue,\n  enableFilterOption,\n  wrapperStyle,\n  ...props\n}: InputOptionProps) {\n  const [_open, setOpen] = useState(defaultVisible ?? false);\n  const [focus, setFocus] = useState(false);\n  const [rect, setRect] = useState<{ width: number; height: number }>(\n    defaultRect\n  );\n  const overlay = useMemo(() => {\n    return (\n      <>\n        {!!options &&\n          optionalFilter(\n            options,\n            (option) =>\n              enableFilterOption ? option.includes(value ?? \"\") : true,\n            enableFilterOption\n          ).map((option, i) => (\n            <OptionWrapper\n              key={i}\n              $size={size}\n              onClick={() => {\n                if (setValue) setValue(option);\n                setOpen(false);\n              }}\n              style={{\n                ...optionStyle,\n              }}\n            >\n              {option}\n            </OptionWrapper>\n          ))}\n      </>\n    );\n  }, [enableFilterOption, optionStyle, options, setValue, size, value]);\n  return (\n    <BaseDropdown\n      visible={_open}\n      overlay={overlay}\n      overlayContainerStyle={{\n        background: \"#fff\",\n        borderRadius: \"4px\",\n        overflow: \"hidden\",\n        boxShadow: shadows.hardShadow,\n        width: rect.width,\n      }}\n      {...props}\n      onVisibleChange={(visible) => setOpen(visible)}\n    >\n      <Wrapper\n        ref={(el) => {\n          if (!el) return;\n          const bound = el.getBoundingClientRect();\n          const target = { width: bound.width, height: bound.height };\n          if (rect.width !== target.width || rect.height !== target.height) {\n            setRect(target);\n          }\n        }}\n        style={{\n          borderColor: focus || _open ? colors.textInput.link : undefined,\n          backgroundColor: focus || _open ? \"#fff\" : undefined,\n          padding: size === \"small\" ? \"1px 5px\" : \"8px 5px\",\n          ...wrapperStyle,\n        }}\n      >\n        <Input\n          onChange={(e) => setValue?.(e.target.value)}\n          {...inputAttrs}\n          value={value}\n          onFocus={(e) => {\n            setFocus(true);\n            if (inputAttrs?.onFocus) inputAttrs.onFocus(e);\n          }}\n          onBlur={(e) => {\n            setFocus(false);\n            if (inputAttrs?.onBlur) inputAttrs.onBlur(e);\n          }}\n        />\n        <DropdownButton\n          onClick={() => setOpen(!_open)}\n          $size={size}\n          style={{\n            position: \"absolute\",\n            right: 6,\n          }}\n        />\n      </Wrapper>\n    </BaseDropdown>\n  );\n}\n\nconst Input = styled.input`\n  position: relative;\n  border: none;\n  outline: none;\n  height: 20px;\n  border-radius: 4px;\n  background-color: transparent;\n  color: currentcolor;\n  ${fonts[\"Caption-Large/Regular\"]}\n`;\n\nconst OptionWrapper = styled.div<{ $size?: \"small\" | \"medium\" }>`\n  display: flex;\n  align-items: center;\n  gap: ${({ $size }) => ($size === \"small\" ? `2px 6px` : `8px 6px`)};\n  width: 100%;\n  padding: 2px 12px 2px 32px;\n  min-width: 120px;\n  ${fonts[\"Caption-Large/Regular\"]}\n  line-height: 20px;\n\n  &:hover {\n    background-color: ${colors.button.hovered};\n  }\n`;\n\nconst Wrapper = styled.div`\n  box-sizing: border-box;\n  position: relative;\n  display: flex;\n  align-items: center;\n  padding-right: 36px;\n  border: 1px solid;\n  border-radius: 4px;\n  width: fit-content;\n  border-color: transparent;\n\n  &:hover {\n    border-color: ${colors.button.hovered};\n    background-color: #fff;\n  }\n`;\n"],"names":["DropdownButton","styled","IconArrowSm","p","colors","optionalFilter","arr","fn","active","filter","defaultWidth","defaultHeight","defaultRect","InputOption","inputAttrs","defaultVisible","options","optionStyle","value","setValue","enableFilterOption","wrapperStyle","_open","setOpen","useState","focus","setFocus","rect","setRect","overlay","useMemo","jsx","Fragment","option","i","OptionWrapper","size","BaseDropdown","shadows","hardShadow","width","el","bound","target","height","undefined","Input","e","input","div","$size","fonts","Wrapper"],"mappings":"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"}