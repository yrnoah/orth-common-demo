{"version":3,"file":"useRafState-37c98633.js","sources":["../../../../node_modules/react-use/esm/useUnmount.js","../../../../node_modules/react-use/esm/useRafState.js"],"sourcesContent":["import { useRef } from 'react';\nimport useEffectOnce from './useEffectOnce';\nvar useUnmount = function (fn) {\n    var fnRef = useRef(fn);\n    // update the ref each render so if it change the newest callback will be invoked\n    fnRef.current = fn;\n    useEffectOnce(function () { return function () { return fnRef.current(); }; });\n};\nexport default useUnmount;\n","import { useCallback, useRef, useState } from 'react';\nimport useUnmount from './useUnmount';\nvar useRafState = function (initialState) {\n    var frame = useRef(0);\n    var _a = useState(initialState), state = _a[0], setState = _a[1];\n    var setRafState = useCallback(function (value) {\n        cancelAnimationFrame(frame.current);\n        frame.current = requestAnimationFrame(function () {\n            setState(value);\n        });\n    }, []);\n    useUnmount(function () {\n        cancelAnimationFrame(frame.current);\n    });\n    return [state, setRafState];\n};\nexport default useRafState;\n"],"names":["useUnmount","fn","fnRef","useRef","useEffectOnce","useUnmount$1","useRafState","initialState","frame","_a","useState","state","setState","setRafState","useCallback","value","useRafState$1"],"mappings":"wFAEA,IAAIA,EAAa,SAAUC,EAAI,CAC3B,IAAIC,EAAQC,SAAOF,CAAE,EAErBC,EAAM,QAAUD,EAChBG,EAAc,UAAY,CAAE,OAAO,UAAY,CAAE,OAAOF,EAAM,QAAS,EAAI,CAAE,CACjF,EACA,MAAAG,EAAeL,ECNf,IAAIM,EAAc,SAAUC,EAAc,CACtC,IAAIC,EAAQL,SAAO,CAAC,EAChBM,EAAKC,EAAAA,SAASH,CAAY,EAAGI,EAAQF,EAAG,CAAC,EAAGG,EAAWH,EAAG,CAAC,EAC3DI,EAAcC,cAAY,SAAUC,EAAO,CAC3C,qBAAqBP,EAAM,OAAO,EAClCA,EAAM,QAAU,sBAAsB,UAAY,CAC9CI,EAASG,CAAK,CAC1B,CAAS,CACJ,EAAE,CAAE,CAAA,EACLf,OAAAA,EAAW,UAAY,CACnB,qBAAqBQ,EAAM,OAAO,CAC1C,CAAK,EACM,CAACG,EAAOE,CAAW,CAC9B,EACA,MAAAG,EAAeV","x_google_ignoreList":[0,1]}